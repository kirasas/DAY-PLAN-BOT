from aiogram.utils.emoji import emojize
from collections import OrderedDict
import datetime
import sqlite3
import math
import ast
from IMP.CONSTS_imp import no_emoji_list, dict_with_bold_nums

conn = sqlite3.connect('TWO_DB.db', check_same_thread=False)
cursor = conn.cursor()


# GENERAL
def get_data_process_dp(user_id: int, *name_keys) -> list:
    cursor.execute(f'SELECT work_dict from all_cashDP WHERE user_id = ?', (user_id,))
    work_dict = ast.literal_eval(cursor.fetchone()[0])

    got_values = [work_dict.get(one_key) for one_key in name_keys]

    return got_values if len(got_values) > 1 else got_values[0]


def save_data_process_dp(user_id: int, **keys_and_values):
    cursor.execute(f'SELECT work_dict from all_cashDP WHERE user_id = ?', (user_id,))
    work_dict = ast.literal_eval(cursor.fetchone()[0])
    work_dict.update(keys_and_values)

    cursor.execute(f"UPDATE all_cashDP set work_dict = ? "
                   f"WHERE user_id = ?",
                   (str(work_dict), user_id,))
    conn.commit()


def create_dict_with_index_emoji(huge_list, full_emoji_tuple=None):
    if not full_emoji_tuple:
        full_emoji_tuple = tuple(OrderedDict.fromkeys((one_elem[1]
                                                       for one_elem in huge_list
                                                       if one_elem[1] not in no_emoji_list)))
    # –ø–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ —ç–≤–µ–Ω—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∂–∏
    return \
        dict(
            zip(
                full_emoji_tuple,
                [
                    [this_index for this_index, this_elm in enumerate(huge_list)
                     if one_emoji == this_elm[1]]
                    for one_emoji in full_emoji_tuple
                ]
            )
        )


def sort_data_huge_list(user_id,
                        huge_list):
    updated_data_1, with_index_emoji = \
        get_data_process_dp(user_id, 'updated_data_1', 'with_index_emoji')

    if not updated_data_1 \
            or updated_data_1[0] != huge_list \
            or not updated_data_1[1]:

        # —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∂–∏
        full_emoji_tuple = tuple(OrderedDict.fromkeys((one_elem[1]
                                                       for one_elem in huge_list
                                                       if one_elem[1] not in no_emoji_list)))

        # –ø–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç —Å —ç–≤–µ–Ω—Ç–∞–º–∏ –¥–∞–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∂–∏
        list_for_group_emoji = \
            [
                {one_emoji: [this_elm[0] for this_elm in huge_list if one_emoji == this_elm[1]]}
                for one_emoji in full_emoji_tuple
            ]

        if not with_index_emoji:

            # –ø–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ —ç–≤–µ–Ω—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∂–∏
            dict_with_index_emoji = create_dict_with_index_emoji(huge_list, full_emoji_tuple)

            save_data_process_dp(user_id, emoji_plus_elements=(full_emoji_tuple, list_for_group_emoji),
                                 with_index_emoji=dict_with_index_emoji, work_with_index_emoji=dict_with_index_emoji,
                                 updated_data_1=(huge_list, list_for_group_emoji))

        else:
            save_data_process_dp(user_id, updated_data_1=(huge_list, list_for_group_emoji))
        return list_for_group_emoji

    else:
        return updated_data_1[1]


# TRANSFORM ELEMENTS
def big_replacing(thing,
                  your_dict: dict): return ''.join([your_dict.get(one_elm)
                                                    for one_elm in str(thing)])


def number_to_emoji(number: int):
    nums_and_word = {
        "0": 'zero',
        "1": 'one',
        "2": 'two',
        "3": 'three',
        "4": 'four',
        "5": 'five',
        "6": 'six',
        "7": 'seven',
        "8": 'eight',
        "9": 'nine'
    }

    # –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏ –ø–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∂–∏ —Ü–∏—Ñ—Ä—É
    return ''.join([emojize(f':{nums_and_word.get(one_num)}:')
                    for one_num in str(number)])


def number_to_low_index(number: int):
    number = str(number)
    # –ø–æ–ª—É—á–∞–µ–º small —Ü–∏—Ñ—Ä—É –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—ë –≤ –æ–¥–Ω–æ str
    return ''.join(map(lambda num: nums_and_indexes.get(num), number))


def in_roman_number(number: int):
    result = ''
    for arabic, roman in zip((1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1),
                             'M     CM   D    CD   C    XC  L   XL  X   IX V  IV I'.split()):
        result += number // arabic * roman
        number %= arabic
    return result


def height_change_elements(general_list, to_up_indexes, to_down_indexes):
    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ—â–∞–µ–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã –∏ —ç–ª–µ–º–µ–Ω—Ç—ã
    relocate_indexes = \
        to_up_indexes + to_down_indexes
    relocate_elements = [general_list[one_index]
                         for one_index in relocate_indexes]

    # —Å–º–µ—â–∞–µ–º –≤–≤–µ—Ä—Ö –ø–æ –∏–Ω–¥–µ–∫—Å—É –ø–µ—Ä–µ–º–µ—â–∞–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    for one_index, general_index in enumerate(sorted(relocate_indexes)):
        general_list[general_index] = relocate_elements[one_index]
    return general_list


def to_right_russian_word_day(number_days: int):
    division_by_10 = number_days % 10
    if number_days == 0 or division_by_10 == 0 \
            or division_by_10 >= 5 \
            or number_days in range(11, 19):
        return '–¥–Ω–µ–π'
    elif division_by_10 == 1:
        return '–¥–µ–Ω—å'
    else:
        return '–¥–Ω—è'


# GETTING
def get_live_hours(begin_clock: int, end_clock: int) -> iter:
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ª–∏—Å—Ç —Å —á–∞—Å–∞–º–∏ —Ä–∞–±–æ—Ç—ã DP
    for range_hour in range(24):
        now_hour = begin_clock + range_hour if begin_clock + range_hour < 25 \
            else begin_clock + range_hour - 24

        yield now_hour

        if now_hour is end_clock: break


def get_datetime_from_str(your_str: str) -> datetime: return \
    datetime.datetime.strptime(your_str, '%Y-%m-%d %H:%M:%S.%f%z')


def get_user_time_now(delta_utc: int): return datetime.datetime.now(datetime.timezone.utc) + \
                                              datetime.timedelta(hours=delta_utc)


def get_delta_time_to_str(one_time, delta_utc,
                          adding_time=0, needing_clock_diff=None):
    if one_time:
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        diff_in_time = get_user_time_now(delta_utc) - get_datetime_from_str(one_time)
        clock_diff = str(math.floor((diff_in_time.total_seconds() + adding_time) / 60))
        str_clock = 'ùü¨' * (3 - len(clock_diff)) + big_replacing(clock_diff, dict_with_bold_nums)

        return str_clock if not needing_clock_diff \
            else (str_clock, clock_diff)
    return 'ùü¨ùü¨ùü¨'


def get_first_elem(huge_list, indexes_emoji):
    if indexes_emoji:
        for one_ind in indexes_emoji:
            if huge_list[one_ind][1] not in no_emoji_list:
                name_elm = next(iter(huge_list[one_ind][0]))
                time_work = huge_list[one_ind][2]

                return one_ind, name_elm, time_work


def get_pages_with_this_elem(user_id,
                             element, huge_list):
    pages_with_indexes = \
        get_data_process_dp(user_id, 'pages_with_indexes')

    # –Ω–∞—Ö–æ–¥–∏–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è element
    allow_pages = []
    if type(element) is str and element.isdigit():
        for one_page, one_value in pages_with_indexes.items():

            if int(element) in one_value:
                allow_pages = [one_page]
                break

    # –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ —ç–º–æ–¥–∂–∏ –∏–ª–∏ —á–∞—Å—Ç—å –±–ª–æ–∫–∞
    else:
        updated_elements_emoji = \
            create_dict_with_index_emoji(huge_list).get(element) if type(element) is str else element

        # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã,
        # —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å allow_pages
        allow_pages = [one_page
                       for one_page, one_value in pages_with_indexes.items()
                       if set(updated_elements_emoji) & set(one_value)]

    save_data_process_dp(user_id, allow_pages=allow_pages)
    return allow_pages


# WORK WITH KBS
def get_button(text, callback_data) -> dict:
    return {'text': str(text), 'callback_data': str(callback_data)}


def add_buttons(*buttons, your_kb=None, row_width=3):
    # —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—ã —Å –¥–ª–∏–Ω–æ–π row_width
    new_butts = [buttons[i:i + row_width] for i in range(0, len(buttons), row_width)]

    if your_kb:
        your_kb['inline_keyboard'] = your_kb.get('inline_keyboard') + new_butts
        return your_kb
    else:
        return {'inline_keyboard': new_butts}


def row_buttons(*buttons, your_kb=None):
    # –∏–ª–∏ —Å–æ–∑–¥—ë–º –Ω–æ–≤—É—é –∫–±, –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ —É–∂–µ —Å—É—à–µ—Å—Ç–≤—É—é—à–∏–º
    if your_kb:
        your_kb['inline_keyboard'] = your_kb.get('inline_keyboard') + [buttons]
        return your_kb
    else:
        return {'inline_keyboard': [buttons]}


def to_big_kb(butts_list, this_kb=None):
    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —á–µ—Ç—ã—Ä–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    return add_buttons(*butts_list, your_kb=this_kb, row_width=4)


# CONDITIONS
def condition_did_all_elem(huge_list, indexes_list=None, return_numbers=None):
    if indexes_list is None:
        indexes_list = (one_ind for one_ind in range(len(huge_list)))

    condition_list = (True if huge_list[one_ind][1] in ('‚≠ê', '‚ùå')
                      else False
                      for one_ind in indexes_list)

    return sum(condition_list) if return_numbers \
        else all(condition_list)


def condition_existing_live_elem(user_id, huge_list, here_is_event=None):
    last_emoji, our_part_of_block = \
        get_data_process_dp(user_id, 'last_emoji', 'our_part_of_block')

    # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã
    existing_events = get_first_elem(huge_list, our_part_of_block) if here_is_event \
        else sort_data_huge_list(user_id, huge_list)

    # –µ—Å–ª–∏ –Ω–µ—Ç –ù–ï –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö/–∑–∞–ª—É–Ω–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if not existing_events:

        cold_block, cold_event = \
            get_data_process_dp(user_id, 'cold_block', 'cold_event')

        # —Ä–∞–±–æ—Ç–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ—Å—è —ç–ª–µ–º–µ–Ω—Ç–∞/–±–ª–æ–∫–∞
        if cold_event:
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π —ç–º–æ–¥–∂–∏ —É –ø–µ—Ä–≤–æ–≥–æ –≤ –ª—É–Ω–µ
            huge_list[cold_event.pop(0)][1] = last_emoji
            save_data_process_dp(user_id, cold_event=cold_event, huge_list=huge_list)
        elif cold_block:
            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –±–ª–æ–∫
            unexpected_sun_emoji = next(iter(cold_block))

            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–æ–¥–Ω–æ–µ —ç–º–æ–¥–∂–∏
            for index_DP in cold_block.pop(unexpected_sun_emoji):
                huge_list[index_DP][1] = unexpected_sun_emoji
            save_data_process_dp(user_id, cold_block=cold_block, huge_list=huge_list)

        existing_events = get_first_elem(huge_list, our_part_of_block) if here_is_event \
            else sort_data_huge_list(user_id, huge_list)

    return existing_events
