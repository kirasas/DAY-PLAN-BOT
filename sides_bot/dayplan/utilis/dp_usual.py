import math
import string
#
from utilis.consts_common import nums_and_emoji
from utilis.main_common import big_replacing, \
    get_button, row_buttons
#
from sides_bot.dayplan.utilis.consts import first_open_but
from sides_bot.dayplan.utilis.main import get_user_time_now, \
    get_data_process_dp, save_data_process_dp, \
    get_pages_with_this_elem, get_delta_time_to_str


def get_progress_dp(huge_list):
    numbers_progress = \
        math.floor(
            sum([1 for one_elem in huge_list if one_elem[1] == '‚≠ê']) / len(huge_list) * 6)
    return numbers_progress * '‚ñà' + '‚ñí' * (6 - numbers_progress)


def text_for_usual_dp(huge_list, events_pattern_for_putting):
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    pages_with_texts = {1: "‚úîÔ∏è<b>DAY PLAN</b>‚úñÔ∏è\n"
                           "\t\t\t\t\tüïí $str_clock üïò\n"
                           " ‚ù±‚óØ$progress_dp‚óØ‚ù∞\n\n"}
    pages_with_indexes = {1: []}
    pages_with_patterns = {1: []}
    only_pages = [1]

    # —Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä–æ–∫–∏ –î–ü
    n_page = 1
    for one_ind, one_elm in enumerate(huge_list):
        name_elm, description_elm = one_elm[0]

        # –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ data % 5 == 0
        maybe_even_page = (one_ind + 1) % 5 == 0
        # –¥–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å - –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å
        maybe_last = one_ind != len(huge_list) - 1
        # maybe_even_page = True & —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å - –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å
        maybe_nearly_last = maybe_even_page and one_ind + 1 == len(huge_list) - 1

        message_a = f'{big_replacing(one_ind + 1, your_dict=nums_and_emoji)}\n' \
                    f'üî∫ <b>{name_elm}</b>\n' \
                    f'${events_pattern_for_putting[one_ind]} {description_elm}'

        message_a += '\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n' \
            if maybe_last and not maybe_even_page or maybe_nearly_last \
            else '\n'

        # —Ä–∞—Å—à–∏—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pages_with_texts[n_page] += message_a
        # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –∫ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        pages_with_indexes[n_page].append(one_ind)
        # –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —ç–≤–µ–Ω—Ç–∞ —ç–º–æ–¥–∂–∏ –∫ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        pages_with_patterns[n_page].append(events_pattern_for_putting[one_ind])

        # —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        if maybe_even_page and maybe_last and not maybe_nearly_last:
            n_page += 1

            pages_with_texts[n_page] = ''
            pages_with_indexes[n_page] = []
            pages_with_patterns[n_page] = []
            only_pages.append(n_page)

    return only_pages, pages_with_texts, pages_with_indexes, pages_with_patterns


def pages_kb_for_usual_dp(pages_with_texts, only_pages,
                          message_pages, add_callback):
    # –Ω–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –ö–ë
    if out_come_text_mes := pages_with_texts.get(message_pages):
        # –º–µ–Ω—å—à–µ 6 —Å—Ç—Ä–∞–Ω–∏—Ü
        if len(only_pages) < 6:

            butt_list = [get_button(f'¬∑ {n_page} ¬∑',
                                    callback_data=f"{n_page}_{add_callback}") if n_page is message_pages
                         else get_button(f'{n_page}',
                                         callback_data=f"{n_page}_{add_callback}")
                         for n_page in only_pages]

        else:

            # –≤—Å–µ–≥–æ –±–æ–ª—å—à–µ 6 —Å—Ç—Ä–∞–Ω–∏—Ü, –Ω–æ –Ω–∞–∂–∞—Ç–∞ page <= 3
            butt_list = []
            if message_pages <= 3:
                for n_page in only_pages:

                    if n_page == message_pages:
                        butt_list.append(
                            get_button(f'¬∑ {n_page} ¬∑',
                                       callback_data=f"{n_page}_{add_callback}"))
                    elif n_page in (1, 2, 3):
                        butt_list.append(
                            get_button(f'{n_page}',
                                       callback_data=f"{n_page}_{add_callback}"))
                    elif n_page == 4:
                        butt_list.append(
                            get_button(f'{n_page} ‚Ä∫',
                                       callback_data=f"{n_page}_{add_callback}"))
                    elif n_page == 5:
                        butt_list.append(get_button(f'{only_pages[-1]} ¬ª',
                                                    callback_data=f'{only_pages[-1]}_{add_callback}'))
                        break
            else:

                # –≤—Å–µ–≥–æ –±–æ–ª—å—à–µ 6 —Å—Ç—Ä–∞–Ω–∏—Ü, –∞ –Ω–∞–∂–∞—Ç–∞ page > 3
                butt_list = \
                    [
                        get_button(f'¬´ {only_pages[0]}', callback_data=f"{only_pages[0]}_{add_callback}"),
                        get_button(f'‚Äπ {message_pages - 1}', callback_data=f"{message_pages - 1}_{add_callback}"),
                        get_button(f'¬∑ {message_pages} ¬∑', callback_data=f"{message_pages}_{add_callback}")
                    ]

                if message_pages + 1 in only_pages:
                    mes_this = f'{message_pages + 1}' if message_pages + 3 not in only_pages \
                        else f'{message_pages + 1} ‚Ä∫'
                    butt_list.append(get_button(mes_this,
                                                callback_data=f'{message_pages + 1}_{add_callback}'))
                if message_pages + 2 in only_pages:
                    mes_this = str(only_pages[-1]) if message_pages + 3 not in only_pages \
                        else f'{only_pages[-1]} ¬ª'
                    butt_list.append(get_button(mes_this,
                                                callback_data=f'{only_pages[-1]}_{add_callback}'))

        # –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, —Ç–æ —É–±–∏—Ä–∞–µ–º –µ—ë
        kb_dp = None if len(butt_list) == 1 else row_buttons(*butt_list)

        return out_come_text_mes, kb_dp


def get_full_pages_with_text(pages_with_text_without_clock,
                             str_clock, progress_dp):
    pages_with_texts = pages_with_text_without_clock.copy()
    pages_with_texts[1] = \
        string.Template(pages_with_texts[1]).safe_substitute(str_clock=str_clock,
                                                             progress_dp=progress_dp)
    return pages_with_texts


def get_full_dp_kb(need_kb,
                   huge_list,
                   all_time_DP, delta_utc,
                   cold_event, clock_event,
                   cold_block, clock_block,
                   user_id, the_end_dp, DP_clock,
                   end_last_time_event, last_emoji):

    new_need_kb = need_kb.copy() if need_kb else None

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º: –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã | –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –î–ü
    if all([True if one_elem[1] == '‚≠ê' else False for one_elem in huge_list]) or the_end_dp:

        # –∑–∞–≤–µ—Ä—à–∞–µ–º –î–ü
        if not the_end_dp:
            # GET_DATA_PROCESS_DP
            stb_DP, updated_data_usual_dp = \
                get_data_process_dp(user_id,
                                    'stb_DP', 'updated_data_usual_dp')

            # –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
            this_block_time = (clock_block, end_last_time_event)
            all_time_DP[-1][last_emoji].append(this_block_time)

            # –≤—Ä–µ–º—è –î–ü
            all_time_DP.append((DP_clock, str(get_user_time_now(delta_utc))))

            # –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—Ä–∞–π–Ω–∏–π —Ä–∞–∑ –¥–µ–ª—å—Ç—É –¥–ø
            updated_data_usual_dp[2] = get_delta_time_to_str(DP_clock, delta_utc, adding_time=-stb_DP)

            save_data_process_dp(user_id,
                                 the_end_dp=1, all_time_DP=all_time_DP,
                                 clock_block=None, cold_event=None,
                                 updated_data_usual_dp=updated_data_usual_dp,
                                 proof='THE_END_DP')

        return row_buttons(get_button(f'‚úñÔ∏è–ó–ê–ö–†–´–¢–¨‚úñÔ∏è', callback_data='close_DP'),
                           your_kb=new_need_kb)
    else:

        butt_list = [get_button('‚öôÔ∏è', 'settings_DP')]
        # –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ª—É–Ω–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏
        if cold_event and not clock_event:
            butt_list.append(get_button('üåï', callback_data='mooning'))

        # –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∏ clock_block is None
        elif cold_block and not clock_block:
            butt_list.append(get_button('‚òÄ', callback_data='sunning'))
        butt_list.append(get_button(f'‚ñ∑‚ñ∑‚ñ∑', callback_data='way_bl'))

        # –∫–Ω–æ–ø–∫–∏ –∏–∑ butt_list –≤ –æ–¥–∏–Ω row
        return row_buttons(*butt_list, your_kb=new_need_kb)


def values_for_usual_dp(huge_list,
                        message_pages=1,
                        str_clock='000',
                        add_callback='xDP',
                        with_index_emoji=None,
                        updated_data_usual_dp=None,
                        first_open=first_open_but,
                        all_time_DP=None, delta_utc=None,
                        cold_event=None, clock_event=None,
                        cold_block=None, clock_block=None,
                        end_last_time_event=None, last_emoji=None,
                        user_id=None, the_end_dp=None, DP_clock=None) -> (str, dict, list, dict):

    # –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –î–ü/–∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–∞ –µ–≥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    if not updated_data_usual_dp:

        # –ª–∏—Å—Ç —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–≤–µ–Ω—Ç–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —à–∞–±–ª–æ–Ω
        events_pattern_for_putting = [f'emoji{number_emoji}'
                                      for number_emoji in range(len(huge_list))]

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        only_pages, pages_with_sample_texts, pages_with_indexes, pages_with_patterns \
            = text_for_usual_dp(huge_list, events_pattern_for_putting)

        # dict –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —à–∞–±–ª–æ–Ω: {pattern_emoji: emoji}
        values_putting = dict(zip(events_pattern_for_putting, [one_elem[1] for one_elem in huge_list]))

        # –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Å—Ç–∞–≤–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è str_clock –∏ progress_dp
        pages_with_text_without_clock = \
            dict(
                [
                    (one_page, string.Template(text_page).safe_substitute(values_putting))
                    for one_page, text_page in pages_with_sample_texts.items()
                ]
            )

        # —Å–æ –≤—Å—Ç–∞–≤–∫–æ–π str_clock –∏ progress_dp
        progress_dp = get_progress_dp(huge_list)
        pages_with_texts = get_full_pages_with_text(pages_with_text_without_clock,
                                                    str_clock, get_progress_dp(huge_list))

        # –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—ë–º buttons –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ page
        out_come_text_mes, kb_dp = \
            pages_kb_for_usual_dp(pages_with_texts, only_pages,
                                  1, add_callback)

        full_kb_dp = row_buttons(first_open, your_kb=kb_dp.copy() if kb_dp else None) if first_open \
            else get_full_dp_kb(kb_dp,
                                huge_list,
                                all_time_DP, delta_utc,
                                cold_event, clock_event,
                                cold_block, clock_block,
                                user_id, the_end_dp, DP_clock,
                                end_last_time_event=end_last_time_event, last_emoji=last_emoji)

        return out_come_text_mes, full_kb_dp, \
               [huge_list,
                add_callback, str_clock, message_pages,
                only_pages, pages_with_texts, progress_dp,
                kb_dp,
                out_come_text_mes, full_kb_dp,
                pages_with_sample_texts, pages_with_indexes,
                pages_with_patterns, pages_with_text_without_clock]

    # –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    elif huge_list != updated_data_usual_dp[0]:

        # —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è: —á—Ç–æ –∑–∞ —ç–ª–µ–º–µ–Ω—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω
        updated_element = [one_index for one_index, new_elem in enumerate(huge_list)
                           if new_elem != updated_data_usual_dp[0][one_index]]

        # –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
        updated_pages = get_pages_with_this_elem(updated_element,
                                                 with_index_emoji, updated_data_usual_dp[11])

        # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ pages_with_texts
        for one_page in updated_pages:
            # —Å–æ–∑–¥–∞—ë–º dict: {pattern: new_emoji} –¥–ª—è —ç—Ç–æ–π page
            values_putting = \
                dict(
                    zip(
                        # –ø–∞—Ç—Ç–µ—Ä–Ω—ã —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        updated_data_usual_dp[12][one_page],

                        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ —ç–º–æ–¥–∂–∏ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        [huge_list[one_index_emoji][1]
                         for one_index_emoji in updated_data_usual_dp[11][one_page]]
                    )
                )

            # –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Å—Ç–∞–≤–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è str_clock –∏ progress_dp
            updated_data_usual_dp[13][one_page] = \
                string.Template(updated_data_usual_dp[10][one_page]).safe_substitute(values_putting)

        # –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω–µ—á–Ω—ã–π –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        progress_dp = get_progress_dp(huge_list)
        pages_with_texts = get_full_pages_with_text(updated_data_usual_dp[13],
                                                    str_clock,
                                                    progress_dp)

        # –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—ë–º buttons –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ page
        out_come_text_mes, kb_dp = \
            pages_kb_for_usual_dp(pages_with_texts, updated_data_usual_dp[4],
                                  1, add_callback)

        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        full_kb_dp = get_full_dp_kb(kb_dp,
                                    huge_list,
                                    all_time_DP, delta_utc,
                                    cold_event, clock_event,
                                    cold_block, clock_block,
                                    user_id, the_end_dp, DP_clock,
                                    end_last_time_event=end_last_time_event, last_emoji=last_emoji)

        # –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
        updated_data_usual_dp[0], \
        updated_data_usual_dp[5], updated_data_usual_dp[6], \
        updated_data_usual_dp[7], \
        updated_data_usual_dp[8], updated_data_usual_dp[9] = \
            huge_list, \
            pages_with_texts, progress_dp, \
            kb_dp, \
            out_come_text_mes, full_kb_dp

    # –∏–∑–º–µ–Ω–µ–Ω–∏–µ add_callback
    elif add_callback != updated_data_usual_dp[1]:

        pages_with_texts = get_full_pages_with_text(updated_data_usual_dp[13],
                                                    str_clock, updated_data_usual_dp[6])

        # –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—ë–º –ö–ë –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ page
        out_come_text_mes, kb_dp = \
            pages_kb_for_usual_dp(pages_with_texts, updated_data_usual_dp[4],
                                  message_pages, add_callback)

        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        full_kb_dp = get_full_dp_kb(kb_dp,
                                    huge_list,
                                    all_time_DP, delta_utc,
                                    cold_event, clock_event,
                                    cold_block, clock_block,
                                    user_id, the_end_dp, DP_clock,
                                    end_last_time_event=end_last_time_event, last_emoji=last_emoji)

        # –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
        updated_data_usual_dp[1], updated_data_usual_dp[7], \
        updated_data_usual_dp[8], updated_data_usual_dp[9], \
        updated_data_usual_dp[5] = \
            add_callback, kb_dp, \
            out_come_text_mes, full_kb_dp, \
            pages_with_texts

    # –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –Ω–æ —Å–∞–º –î–ü –Ω–∏–∫–∞–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    elif message_pages != updated_data_usual_dp[3]:

        # –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—ë–º –ö–ë –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ page
        out_come_text_mes, kb_dp = \
            pages_kb_for_usual_dp(updated_data_usual_dp[5], updated_data_usual_dp[4],
                                  message_pages, add_callback)

        # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–∞–∫–∏–µ –∂–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –Ω–æ –º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if kb_dp:
            updated_data_usual_dp[9]['inline_keyboard'][0] = kb_dp.copy()['inline_keyboard'][0]
        full_kb_dp = updated_data_usual_dp[9]

        # –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
        updated_data_usual_dp[3], updated_data_usual_dp[7], \
        updated_data_usual_dp[8] = \
            message_pages, kb_dp, \
            out_come_text_mes

    # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    elif str_clock != updated_data_usual_dp[2]:

        pages_with_texts = get_full_pages_with_text(updated_data_usual_dp[13],
                                                    str_clock, updated_data_usual_dp[6])

        out_come_text_mes, full_kb_dp = \
            pages_with_texts[message_pages], updated_data_usual_dp[9]

        # –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
        updated_data_usual_dp[2], updated_data_usual_dp[5], updated_data_usual_dp[8] = \
            str_clock, pages_with_texts, out_come_text_mes

    # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    else:
        out_come_text_mes, full_kb_dp = \
            updated_data_usual_dp[8], updated_data_usual_dp[9]

    return out_come_text_mes, full_kb_dp, updated_data_usual_dp
