from collections import OrderedDict
from emoji import emojize, demojize
from num2words import num2words
import string
#
from utilis.consts_common import back_mes_but, nums_and_emoji, dict_with_small_numbers, emoji_work_dp_list, \
    bad_symbols_for_emoji_name
from utilis.main_common import big_replacing, get_button, row_buttons, add_buttons
#
from sides_bot.dayplan.utilis.consts import back_to_relocating_but
from sides_bot.dayplan.utilis.main import in_roman_number, \
    get_pages_with_this_elem, get_dict_with_index_emoji, get_data_process_dp, save_data_process_dp, \
    get_first_work_index
from sides_bot.dayplan.utilis.dp_usual import values_for_usual_dp
from sides_bot.dayplan.utilis.block import get_indexes_current_part_block, \
    get_time_block, minus_all_freeze_block

"""FIRST WINDOW DP REMAKING"""


def text_for_remake_dp_first(remake_huge_list):
    message_a = ''
    pages_with_texts = {}
    only_pages = []
    n_page = 0

    # —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∂–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞, –ø—Ä–∏ —Ç–æ–º –Ω–µ –≤ ('‚≠ê', '‚ùÑÔ∏è')
    full_emoji = OrderedDict.fromkeys((one_elem[1]
                                       for one_elem in remake_huge_list
                                       if one_elem[1] not in ('‚≠ê', '‚ùÑÔ∏è')))

    for one_ind, one_emoji in enumerate(full_emoji):
        only_name_emoji = demojize(one_emoji)[1:-1]

        # —É—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —ç–º–æ–¥–∂–∏ –ø–ª–æ—Ö–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤,
        # –∏–∑-–∑–∞ —á–µ–≥–æ –¢–ì –Ω–µ –±—É–¥–µ—Ç –≤—ã–¥–µ–ª—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É
        exist_bad_symbol = True if sum(1 for el in only_name_emoji if el in bad_symbols_for_emoji_name) \
            else False

        # –¥–æ–±–∞–≤–ª—è–µ–º —Å–∞–º –±–ª–æ–∫
        parse_html = 'u' if not exist_bad_symbol else 'code'
        message_a += f'\n„Ä∞{one_emoji}‚îÇ<{parse_html}><b>/{only_name_emoji}BLX</b></{parse_html}>\n'

        parts_block = get_indexes_current_part_block(
            one_emoji, get_dict_with_index_emoji(remake_huge_list),
            remake_huge_list, get_full_indexes_parts=True)
        # –µ—Å–ª–∏ –Ω–µ—Ç —á–∞—Å—Ç–µ–π —É –±–ª–æ–∫–∞
        if len(parts_block) == 1:

            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —ç–≤–µ–Ω—Ç–∞–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö —ç–º–æ–¥–∂–∏ == one_emoji
            message_a += ''.join([
                # –Ω–æ–º–µ—Ä —ç–≤–µ–Ω—Ç–∞
                f'{big_replacing(this_ind + 1, your_dict=nums_and_emoji)}‚îÇ/EVN{this_ind + 1}\nüîª'
                # –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–≤–µ–Ω—Ç–∞
                f'<b>{one_elem[0][0]}</b>'
                # –æ–ø–∏—Å–∞–Ω–∏–µ —ç–≤–µ–Ω—Ç–∞
                f'\n{one_emoji}{one_elem[0][1]}\n\n'
                for this_ind, one_elem in enumerate(remake_huge_list)
                if one_elem[1] == one_emoji
            ])
        # –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —É –±–ª–æ–∫–∞ —á–∞—Å—Ç–µ–π
        else:

            # —É—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —ç–º–æ–¥–∂–∏ "-",
            # –∏–∑-–∑–∞ —á–µ–≥–æ –¢–ì –Ω–µ –±—É–¥–µ—Ç –≤—ã–¥–µ–ª—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É
            parse_html = 'i' if not exist_bad_symbol else 'code'

            # —Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –±–ª–æ–∫–∞
            message_a += \
                ''.join(
                    [
                        # —Å–Ω–∞—á–∞ –¥–∞—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏ –±–ª–æ–∫–∞
                        f'‚ù£{num2words(index_part + 1, to="ordinal").upper()} | '
                        f'<{parse_html}>/PART{index_part + 1}_{only_name_emoji}</{parse_html}>\n' +
                        ''.join(
                            [
                                # –Ω–æ–º–µ—Ä —ç–≤–µ–Ω—Ç–∞
                                f'{big_replacing(this_ind + 1, your_dict=nums_and_emoji)}‚îÇ/EVN{this_ind + 1}\nüîª'
                                # –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–≤–µ–Ω—Ç–∞
                                f'<b>{remake_huge_list[this_ind][0][0]}</b>'
                                # –æ–ø–∏—Å–∞–Ω–∏–µ —ç–≤–µ–Ω—Ç–∞
                                f'\n{one_emoji}{remake_huge_list[this_ind][0][1]}\n\n'
                                for this_ind in one_part
                                if remake_huge_list[this_ind][1] == one_emoji
                            ])
                        # –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –±–ª–æ–∫–∞
                        for index_part, one_part in enumerate(parts_block)
                    ])

        # –æ—Ç—Å–µ–∫–ª–∏ –≤—Ç–æ—Ä—É—é \n
        message_a = message_a[:-1] + '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'

        # —É—Å–ª–æ–≤–∏–µ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if one_ind % 2 != 0:
            n_page += 1

            pages_with_texts[n_page] = message_a
            only_pages.append(n_page)

            message_a = ''
        else:
            # –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–º–æ–¥–∂–∏ –∏ –ø—Ä–∏ —Ç–æ–º –Ω–µ –≤—Ç–æ—Ä–æ–π —ç–º–æ–¥–∂–∏,
            # –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if one_ind == len(full_emoji) - 1:

                n_page += 1
                pages_with_texts[n_page] = message_a
                only_pages.append(n_page)

    return pages_with_texts, only_pages


def pages_kb_for_remaking_dp_first_and_third(pages_with_texts, only_pages,
                                             message_pages, add_callback,
                                             view_number=None, reversed_kb=None):
    # –µ—Å–ª–∏ –æ–±—ã—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
    if not view_number:
        def view_number(x): return x

    if reversed_kb:
        # reverse –∫–ª—é—á–µ–π –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –º–µ—Å—Ç–∞—Ö
        pages_with_texts = dict(zip(reversed(pages_with_texts.keys()), pages_with_texts.values()))

    # –Ω–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –ö–ë
    if out_come_text_mes := pages_with_texts.get(message_pages):
        # –º–µ–Ω—å—à–µ 6 —Å—Ç—Ä–∞–Ω–∏—Ü
        if len(only_pages) < 6:

            butt_list = [get_button(f'¬∑ {view_number(n_page)} ¬∑',
                                    callback_data=f"{n_page}_{add_callback}") if n_page is message_pages
                         else get_button(f'{view_number(n_page)}',
                                         callback_data=f"{n_page}_{add_callback}")
                         for n_page in only_pages]

        else:

            # –≤—Å–µ–≥–æ –±–æ–ª—å—à–µ 6 —Å—Ç—Ä–∞–Ω–∏—Ü, –Ω–æ –Ω–∞–∂–∞—Ç–∞ page <= 3
            butt_list = []
            if message_pages <= 3:
                for n_page in only_pages:

                    if n_page == message_pages:
                        butt_list.append(
                            get_button(f'¬∑ {n_page} ¬∑',
                                       callback_data=f"{n_page}_{add_callback}"))
                    elif n_page in (1, 2, 3):
                        butt_list.append(
                            get_button(f'{n_page}',
                                       callback_data=f"{n_page}_{add_callback}"))
                    elif n_page == 4:
                        butt_list.append(
                            get_button(f'{n_page} ‚Ä∫',
                                       callback_data=f"{n_page}_{add_callback}"))
                    elif n_page == 5:
                        butt_list.append(get_button(f'{only_pages[-1]} ¬ª',
                                                    callback_data=f'{only_pages[-1]}_{add_callback}'))
                        break
            else:

                # –≤—Å–µ–≥–æ –±–æ–ª—å—à–µ 6 —Å—Ç—Ä–∞–Ω–∏—Ü, –∞ –Ω–∞–∂–∞—Ç–∞ page > 3
                butt_list = \
                    [
                        get_button(f'¬´ {only_pages[0]}', callback_data=f"{only_pages[0]}_{add_callback}"),
                        get_button(f'‚Äπ {message_pages - 1}', callback_data=f"{message_pages - 1}_{add_callback}"),
                        get_button(f'¬∑ {message_pages} ¬∑', callback_data=f"{message_pages}_{add_callback}")
                    ]

                if message_pages + 1 in only_pages:
                    mes_this = f'{message_pages + 1}' if message_pages + 3 not in only_pages \
                        else f'{message_pages + 1} ‚Ä∫'
                    butt_list.append(get_button(mes_this,
                                                callback_data=f'{message_pages + 1}_{add_callback}'))
                if message_pages + 2 in only_pages:
                    mes_this = str(only_pages[-1]) if message_pages + 3 not in only_pages \
                        else f'{only_pages[-1]} ¬ª'
                    butt_list.append(get_button(mes_this,
                                                callback_data=f'{only_pages[-1]}_{add_callback}'))

        if reversed_kb:
            # –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –±—É–¥—É—â—É—é –ö–ë
            butt_list.reverse()

        # –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, —Ç–æ —É–±–∏—Ä–∞–µ–º –µ—ë
        kb_dp = None if len(butt_list) == 1 else row_buttons(*butt_list)

        return out_come_text_mes, kb_dp


def values_for_remake_dp_first(huge_list, remake_huge_list,
                               remake_element, message_pages,
                               last_page_set_2,
                               updated_data_values_first_dp):
    # –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if not updated_data_values_first_dp \
            or remake_huge_list != updated_data_values_first_dp[0] \
            or huge_list != updated_data_values_first_dp[8]:

        pages_with_texts, only_pages = \
            text_for_remake_dp_first(remake_huge_list)

        out_come_text_mes, kb_dp = \
            pages_kb_for_remaking_dp_first_and_third(pages_with_texts, only_pages, message_pages, 'sett_dp_1')

        copy_elem = kb_dp.copy() if kb_dp else None
        if remake_huge_list == huge_list:
            # None –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ - –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª—å
            full_kb_remake_dp = row_buttons(back_mes_but('settings_DP'), your_kb=copy_elem) \
                if remake_element is None \
                else row_buttons(back_mes_but('settings_DP'), back_to_relocating_but(last_page_set_2),
                                 your_kb=copy_elem)
        else:
            full_kb_remake_dp = row_buttons(back_mes_but('condition_closing'),
                                            back_to_relocating_but(last_page_set_2), your_kb=copy_elem)

        updated_data_values_first_dp = \
            [remake_huge_list,
             message_pages,
             only_pages, pages_with_texts,
             kb_dp,
             out_come_text_mes, full_kb_remake_dp,
             remake_element, huge_list]

    # –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç, –Ω–æ —Å–∞–º –î–ü –Ω–∏–∫–∞–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    elif remake_element != updated_data_values_first_dp[7]:

        out_come_text_mes = updated_data_values_first_dp[5]
        copy_elem = updated_data_values_first_dp[4].copy() if updated_data_values_first_dp[4] else None
        if remake_huge_list == huge_list:
            # None –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ - –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª—å
            full_kb_remake_dp = row_buttons(back_mes_but('settings_DP'),
                                            your_kb=copy_elem) \
                if remake_element is None \
                else row_buttons(back_mes_but('settings_DP'), back_to_relocating_but(last_page_set_2),
                                 your_kb=copy_elem)
        else:
            full_kb_remake_dp = row_buttons(back_mes_but('condition_closing'),
                                            back_to_relocating_but(last_page_set_2),
                                            your_kb=copy_elem)
        updated_data_values_first_dp[6], updated_data_values_first_dp[7] = \
            full_kb_remake_dp, remake_element

    # –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –Ω–æ —Å–∞–º –î–ü –Ω–∏–∫–∞–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    elif message_pages != updated_data_values_first_dp[1]:

        out_come_text_mes, kb_dp = \
            pages_kb_for_remaking_dp_first_and_third(updated_data_values_first_dp[3],
                                                     updated_data_values_first_dp[2], message_pages, 'sett_dp_1')

        # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–∞–∫–∏–µ –∂–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –Ω–æ –º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if kb_dp:
            updated_data_values_first_dp[6]['inline_keyboard'][0] = kb_dp.copy()['inline_keyboard'][0]
        full_kb_remake_dp = updated_data_values_first_dp[6]

        # –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
        updated_data_values_first_dp[1], updated_data_values_first_dp[4], \
        updated_data_values_first_dp[5] = \
            message_pages, kb_dp, \
            out_come_text_mes

    # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    else:
        out_come_text_mes, full_kb_remake_dp = \
            updated_data_values_first_dp[5], updated_data_values_first_dp[6]

    return out_come_text_mes, full_kb_remake_dp, updated_data_values_first_dp


"""SECOND AND THIRD WINDOWS DP REMAKING"""


def text_for_remake_dp_second_and_third(remake_huge_list, events_pattern_for_putting):
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    pages_with_texts = {1: ""}
    pages_with_indexes = {1: []}
    pages_with_patterns = {1: []}
    only_pages = [1]

    # —Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä–æ–∫–∏ –î–ü
    n_page = 1
    for one_ind in range(len(remake_huge_list)):

        # —Å–æ–∑–¥–∞—ë–º –±—É–ª–µ–≤—ã–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —É—Å–ª–æ–≤–∏—è
        maybe_even_page = (one_ind + 1) % 5 == 0
        maybe_last = one_ind != len(remake_huge_list) - 1
        maybe_nearly_last = maybe_even_page and one_ind + 1 == len(remake_huge_list) - 1

        message_a = f'{big_replacing(one_ind + 1, your_dict=nums_and_emoji)}\n' \
                    f'üî∫ ${events_pattern_for_putting[one_ind]}'

        message_a += '\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n' \
            if maybe_last and not maybe_even_page or maybe_nearly_last \
            else '\n'

        # —Ä–∞—Å—à–∏—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pages_with_texts[n_page] += message_a
        # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –∫ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        pages_with_indexes[n_page].append(one_ind)
        # –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —ç–≤–µ–Ω—Ç–∞ —ç–º–æ–¥–∂–∏ –∫ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        pages_with_patterns[n_page].append(events_pattern_for_putting[one_ind])

        # —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        if maybe_even_page and maybe_last and not maybe_nearly_last:
            n_page += 1

            pages_with_texts[n_page] = ''
            pages_with_indexes[n_page] = []
            pages_with_patterns[n_page] = []
            only_pages.append(n_page)

    return only_pages, pages_with_texts, pages_with_indexes, pages_with_patterns


def pages_kb_for_remaking_dp_second(updated_data_rome_kb,
                                    allow_pages,
                                    pages_with_texts, last_action_remaking,
                                    remake_element,
                                    message_pages, add_callback):
    # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–ª–æ–∫–∞ | —á–∞—Å—Ç–∏ –±–ª–æ–∫–∞
    if len(allow_pages) > 1:

        # –µ—Å–ª–∏ None –∏–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if not updated_data_rome_kb \
                or updated_data_rome_kb[0] != pages_with_texts \
                or updated_data_rome_kb[6] != allow_pages \
                or updated_data_rome_kb[7] != remake_element:

            # –±–µ—Ä—ë–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            message_pages = 1
            pages_with_texts_new = [text_page
                                    for number_page, text_page in pages_with_texts.items()
                                    if int(number_page) in allow_pages]

            # –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∏—Å—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            only_pages_new = [one_num for one_num in range(1, len(pages_with_texts_new) + 1)]

            # –≤ —Ç–∏–ø–æ–≤–æ–π –¥–∏–∫—Ç - {number_page: text_page}
            pages_with_texts_new = dict(zip(only_pages_new, pages_with_texts_new))

            # –æ–±—ã—á–Ω–∞—è –ö–ë, –Ω–æ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
            # –µ—Å–ª–∏ –¥–≤–∏–≥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤–Ω–∏–∑ - –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ö–ë
            asked, now_kb = pages_kb_for_remaking_dp_first_and_third(pages_with_texts_new,
                                                                     only_pages_new,
                                                                     message_pages, add_callback,
                                                                     in_roman_number, reversed_kb=
                                                                     True if last_action_remaking == 'down_element'
                                                                     else False)

            updated_data_rome_kb = \
                [pages_with_texts, message_pages, only_pages_new, pages_with_texts_new,
                 asked, now_kb, allow_pages, remake_element]

        elif updated_data_rome_kb[1] != message_pages:

            # –µ—Å–ª–∏ –¥–≤–∏–≥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤–Ω–∏–∑ - –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ö–ë
            asked, now_kb = pages_kb_for_remaking_dp_first_and_third(updated_data_rome_kb[3],
                                                                     updated_data_rome_kb[2],
                                                                     message_pages, add_callback,
                                                                     in_roman_number, reversed_kb=
                                                                     True if last_action_remaking == 'down_element'
                                                                     else False)

            updated_data_rome_kb[1], updated_data_rome_kb[4], updated_data_rome_kb[5] = \
                message_pages, asked, now_kb

        else:
            asked, now_kb = \
                updated_data_rome_kb[4], updated_data_rome_kb[5]

        return asked, now_kb, updated_data_rome_kb

    else:
        updated_data_rome_kb = \
            [pages_with_texts, message_pages, allow_pages, pages_with_texts,
             pages_with_texts[allow_pages[0]], None, allow_pages]

        # –Ω–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü —É –æ–¥–Ω–æ–≥–æ —ç–≤–µ–Ω—Ç–∞: –ö–ë = None
        return pages_with_texts[allow_pages[0]], None, updated_data_rome_kb


def full_kb_for_second_window(need_kb, remake_element,
                              last_page_set_1, last_page_set_3, relocating_part_block):
    if not last_page_set_3: last_page_set_3 = 1

    # –∏–∑–º–µ–Ω—è–µ–º —á–∏—Å–ª–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–≤–µ–Ω—Ç–∞ –Ω–∞ —ç–º–æ–¥–∂–∏ —á–∏—Å–ª–æ
    if type(remake_element) is int:
        remake_element = big_replacing(remake_element + 1, your_dict=nums_and_emoji)
    elif type(remake_element) is list:
        number_part_block = in_roman_number(relocating_part_block[-1]) \
            if type(relocating_part_block[-1]) is int \
            else relocating_part_block[-1]
        remake_element = \
            f'{number_part_block}_{relocating_part_block[0]}_{number_part_block}'

    this_el = get_button(remake_element, callback_data='NONE')
    up_but = get_button('üî∫Ô∏è', callback_data='up_element')
    down_but = get_button('üîª', callback_data='down_element')
    see_all_dp_but = get_button('‚ñ∂Ô∏è', callback_data=f'{last_page_set_3}_sett_dp_3')
    choice_elms_but = get_button('‚óÄÔ∏èÔ∏è', callback_data=f'{last_page_set_1}_sett_dp_1')

    need_kb_full = add_buttons(up_but, this_el, down_but,
                               choice_elms_but, see_all_dp_but,
                               your_kb=need_kb.copy() if need_kb else None)

    return need_kb_full


def full_kb_for_third_window(need_kb, remake_element,
                             history_remakes, last_page_set_2, callback_data):
    if callback_data != 'save_remakes' and history_remakes:
        # –Ω–∞—Ö–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –±—É–¥—É—â–µ–º
        only_future = sum([1 for one_elem_history in history_remakes if one_elem_history[-1] == 'in_future'])

        # –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ—à–ª–æ–≥–æ, –∫ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è
        only_old = len(history_remakes) - only_future - 1
    else:
        only_future = only_old = 0

    # –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–º–µ—â–∞–ª–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏
    callback_to_relocating = f'{last_page_set_2}_sett_dp_2'
    if callback_data in ('back_old_step', 'back_future_step', 'save_remakes'):
        callback_to_relocating = f'{remake_element}|_sett_dp_2' \
            if callback_data != 'save_remakes' and remake_element \
            else '1_sett_dp_1'

    need_kb = \
        add_buttons(
        get_button(f'‚Ü©‚éõ{big_replacing(only_old, your_dict=dict_with_small_numbers)}‚é†',
                   callback_data='back_old_step'),
        get_button('üîπSAFEüîπ', callback_data='save_remakes'),
        get_button(f'‚éõ{big_replacing(only_future, your_dict=dict_with_small_numbers)}‚é†‚Ü™Ô∏è',
                   callback_data='back_future_step'),
        get_button('‚¨ÖÔ∏è', callback_data=callback_to_relocating),
        your_kb=need_kb)

    return need_kb


def values_for_remake_dp_second_and_third(remake_huge_list,
                                          this_updated_data,
                                          add_callback, remake_element,
                                          message_pages=1, history_remakes=None,
                                          last_page_set_2=None, callback_data=None,
                                          last_action_remaking=None, last_page_set_1=None,
                                          last_page_set_3=None, relocating_part_block=None) -> (str, dict, list, dict):
    if not this_updated_data:

        # –ª–∏—Å—Ç —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–≤–µ–Ω—Ç–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —à–∞–±–ª–æ–Ω
        events_pattern_for_putting = [f'event_{number_emoji}'
                                      for number_emoji in range(len(remake_huge_list))]

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        only_pages, pages_with_sample_texts, pages_with_indexes, pages_with_patterns \
            = text_for_remake_dp_second_and_third(remake_huge_list, events_pattern_for_putting)

        # dict –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —à–∞–±–ª–æ–Ω: {pattern_event: event}
        values_putting = dict(zip(
            events_pattern_for_putting,
            [f'<b>{one_elem[0][0]}</b>\n{one_elem[1]} {one_elem[0][1]}' for one_elem in remake_huge_list]))

        # –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω–µ—á–Ω—ã–π –¥–∏–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã
        pages_with_texts = \
            dict(
                [
                    (one_page, string.Template(text_page).safe_substitute(values_putting))
                    for one_page, text_page in pages_with_sample_texts.items()
                ]
            )

        # –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—ë–º buttons –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ page
        updated_data_rome_kb = allow_pages = None
        if add_callback == 'sett_dp_3':
            out_come_text_mes, kb_dp = \
                pages_kb_for_remaking_dp_first_and_third(pages_with_texts, only_pages, 1, add_callback)

            full_kb_remake_dp = full_kb_for_third_window(kb_dp, remake_element,
                                                         history_remakes, last_page_set_2, callback_data)
        else:
            allow_pages = get_pages_with_this_elem(remake_element,
                                                   get_dict_with_index_emoji(remake_huge_list),
                                                   pages_with_indexes)
            out_come_text_mes, kb_dp, updated_data_rome_kb = \
                pages_kb_for_remaking_dp_second(updated_data_rome_kb,
                                                allow_pages,
                                                pages_with_texts, last_action_remaking,
                                                remake_element,
                                                1, add_callback)

            # –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ = 1
            message_pages = 1

            full_kb_remake_dp = full_kb_for_second_window(kb_dp, remake_element,
                                                          last_page_set_1, last_page_set_3, relocating_part_block)

        this_updated_data = \
            [remake_huge_list, message_pages,
             only_pages, pages_with_texts,
             kb_dp,
             out_come_text_mes, full_kb_remake_dp,
             updated_data_rome_kb,
             pages_with_sample_texts, pages_with_indexes, pages_with_patterns,
             remake_element, allow_pages]

    # –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    elif remake_huge_list != this_updated_data[0]:

        # —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è: —á—Ç–æ –∑–∞ —ç–ª–µ–º–µ–Ω—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω
        updated_element = [one_index for one_index, new_elem in enumerate(remake_huge_list)
                           if new_elem != this_updated_data[0][one_index]]

        # –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
        updated_pages = get_pages_with_this_elem(updated_element,
                                                 get_dict_with_index_emoji(remake_huge_list), this_updated_data[9])

        # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∏–∑ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –≤ pages_with_texts
        for one_page in updated_pages:
            # —Å–æ–∑–¥–∞—ë–º dict: {pattern: event} –¥–ª—è —ç—Ç–æ–π page
            values_putting = \
                dict(
                    zip(
                        # –ø–∞—Ç—Ç–µ—Ä–Ω—ã —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        this_updated_data[10][one_page],

                        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ —ç–º–æ–¥–∂–∏ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        [f'<b>{remake_huge_list[one_ind][0][0]}</b>\n{remake_huge_list[one_ind][1]} '
                         f'{remake_huge_list[one_ind][0][1]}'
                         for one_ind in this_updated_data[9][one_page]]
                    )
                )

            # –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Å—Ç–∞–≤–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è str_clock –∏ progress_dp
            this_updated_data[3][one_page] = \
                string.Template(this_updated_data[8][one_page]).safe_substitute(values_putting)

        # –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—ë–º buttons –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ page
        if add_callback == 'sett_dp_3':
            out_come_text_mes, kb_dp = \
                pages_kb_for_remaking_dp_first_and_third(this_updated_data[3], this_updated_data[2],
                                                         message_pages, add_callback)

            full_kb_remake_dp = full_kb_for_third_window(kb_dp, remake_element,
                                                         history_remakes, last_page_set_2, callback_data)
        else:
            this_updated_data[12] = get_pages_with_this_elem(str(remake_element) if type(remake_element) is int
                                                             else remake_element,
                                                             get_dict_with_index_emoji(remake_huge_list),
                                                             this_updated_data[9])

            out_come_text_mes, kb_dp, updated_data_rome_kb = \
                pages_kb_for_remaking_dp_second(this_updated_data[7],
                                                this_updated_data[12],
                                                this_updated_data[3], last_action_remaking,
                                                remake_element,
                                                message_pages, add_callback)
            this_updated_data[7] = updated_data_rome_kb

            # –ø—Ä–∏ –ª—é–±–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ = 1
            message_pages = 1

            full_kb_remake_dp = full_kb_for_second_window(kb_dp, remake_element,
                                                          last_page_set_1, last_page_set_3, relocating_part_block)

        # –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
        this_updated_data[0], this_updated_data[1], \
        this_updated_data[4], \
        this_updated_data[5], this_updated_data[6] = \
            remake_huge_list, message_pages, \
            kb_dp, \
            out_come_text_mes, full_kb_remake_dp

    # –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    elif (remake_element is not None and remake_element != this_updated_data[11]) or callback_data == 'save_remakes':

        # –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—ë–º buttons –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ page
        if add_callback == 'sett_dp_3':
            out_come_text_mes, kb_dp = \
                pages_kb_for_remaking_dp_first_and_third(this_updated_data[3], this_updated_data[2],
                                                         message_pages, add_callback)

            full_kb_remake_dp = full_kb_for_third_window(kb_dp, remake_element,
                                                         history_remakes, last_page_set_2, callback_data)
        else:
            allow_pages = get_pages_with_this_elem(remake_element,
                                                   get_dict_with_index_emoji(remake_huge_list),
                                                   this_updated_data[9])
            this_updated_data[12] = allow_pages

            out_come_text_mes, kb_dp, updated_data_rome_kb = \
                pages_kb_for_remaking_dp_second(None,
                                                allow_pages,
                                                this_updated_data[3], last_action_remaking,
                                                remake_element,
                                                message_pages, add_callback)
            this_updated_data[7] = updated_data_rome_kb

            # –ø—Ä–∏ –ª—é–±–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ remake_element message_pages = 1
            message_pages = 1

            full_kb_remake_dp = full_kb_for_second_window(kb_dp, remake_element,
                                                          last_page_set_1, last_page_set_3, relocating_part_block)

        # –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
        this_updated_data[0], this_updated_data[1], \
        this_updated_data[4], \
        this_updated_data[5], this_updated_data[6], \
        this_updated_data[11] = \
            remake_huge_list, message_pages, \
            kb_dp, \
            out_come_text_mes, full_kb_remake_dp, \
            remake_element

    # –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –Ω–æ —Å–∞–º –î–ü –Ω–∏–∫–∞–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    elif message_pages != this_updated_data[1]:

        # –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—ë–º buttons –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ page
        if add_callback == 'sett_dp_3':
            out_come_text_mes, kb_dp = \
                pages_kb_for_remaking_dp_first_and_third(this_updated_data[3],
                                                         this_updated_data[2], message_pages, add_callback)
        else:
            out_come_text_mes, kb_dp, updated_data_rome_kb = \
                pages_kb_for_remaking_dp_second(this_updated_data[7],
                                                this_updated_data[12],
                                                this_updated_data[3], last_action_remaking,
                                                remake_element,
                                                message_pages, add_callback)
            if updated_data_rome_kb:
                message_pages = updated_data_rome_kb[1]
            this_updated_data[7] = updated_data_rome_kb

        # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–∞–∫–∏–µ –∂–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –Ω–æ –º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if kb_dp:
            # –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç, —Ç–æ kb_dp –º–æ–∂–µ—Ç –±—ã—Ç—å None
            this_updated_data[6]['inline_keyboard'][0] = kb_dp.copy()['inline_keyboard'][0]
        full_kb_remake_dp = this_updated_data[6]

        # –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
        this_updated_data[1], this_updated_data[4], \
        this_updated_data[5] = \
            message_pages, kb_dp, \
            out_come_text_mes

    # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    else:
        out_come_text_mes, full_kb_remake_dp = \
            this_updated_data[5], this_updated_data[6]

    return out_come_text_mes, full_kb_remake_dp, this_updated_data


"""RELOCATING ELEMENTS DP"""


def height_change_elements(general_list, to_up_indexes, to_down_indexes):
    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ—â–∞–µ–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã –∏ —ç–ª–µ–º–µ–Ω—Ç—ã
    relocate_indexes = \
        to_up_indexes + to_down_indexes
    relocate_elements = [general_list[one_index]
                         for one_index in relocate_indexes]

    # —Å–º–µ—â–∞–µ–º –≤–≤–µ—Ä—Ö –ø–æ –∏–Ω–¥–µ–∫—Å—É –ø–µ—Ä–µ–º–µ—â–∞–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    for one_index, general_index in enumerate(sorted(relocate_indexes)):
        general_list[general_index] = relocate_elements[one_index]
    return general_list


def delete_different_parts_block(begin_index_block, end_index_block,
                                 huge_list, our_emoji,
                                 action):
    # —Å—Ä–µ–∑, –≥–¥–µ –µ—Å—Ç—å —ç–≤–µ–Ω—Ç—ã –Ω–∞—à–µ–≥–æ —ç–º–æ–¥–∂–∏
    here_is_our_emoji = [huge_list[one_index]
                         for one_index in range(begin_index_block, end_index_block + 1)]

    # —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∂–∏ –∏–∑ –Ω–∞—à–µ–≥–æ —Å—Ä–µ–∑–∞, –Ω–æ –±–µ–∑ –Ω–∞—à–µ–≥–æ —ç–º–æ–¥–∂–∏
    full_emoji = list(OrderedDict.fromkeys((one_elem[1]
                                            for one_elem in here_is_our_emoji
                                            if one_elem[1] != our_emoji)))
    # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–Ω–∏–∑, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
    # –∏–Ω–∞—á–µ - –≤ –Ω–∞—á–∞–ª–æ
    if action == 'down_element':
        full_emoji.append(our_emoji)
    else:
        full_emoji.insert(0, our_emoji)

    # —ç–≤–µ–Ω—Ç—ã —Å—Ä–µ–∑–∞ –≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    blocks_with_events_in_slice = \
        [one_elem
         for one_emoji in full_emoji
         for one_elem in here_is_our_emoji
         if one_elem[1] == one_emoji]

    # –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    new_locating_blocks = [blocks_with_events_in_slice.pop(0)
                           for _ in here_is_our_emoji]
    huge_list[begin_index_block:end_index_block + 1] = new_locating_blocks


def up_down_elements(remake_element, remake_huge_list,
                     relocating_part_block, history_remakes,
                     action):

    # –¥–µ–π—Å—Ç–≤–∏–µ –≤–Ω–∏–∑ | —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –±–ª–æ–∫
    if action == 'down_element' \
            or (len(set([one_elem[1] for one_elem in remake_huge_list])) == 1
                and type(remake_element) is str):

        if type(remake_element) is int:

            if remake_element < len(remake_huge_list) - 1:
                # –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º + 1
                remake_huge_list[remake_element], remake_huge_list[remake_element + 1] = \
                    remake_huge_list[remake_element + 1], remake_huge_list[remake_element]
                remake_element += 1

            else:

                # –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å
                remake_huge_list.insert(0, remake_huge_list.pop(-1))
                remake_element = 0

        elif type(remake_element) is list:

            # –ø–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω–∞—à–µ–π —á–∞—Å—Ç–∏ –±–ª–æ–∫–∞
            our_indexes = relocating_part_block[1]
            last_index_emoji = our_indexes[-1]

            # –º–µ–Ω—è–µ–º —á–∞—Å—Ç–∏ –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º
            if last_index_emoji != len(remake_huge_list) - 1:
                # –∏–¥–µ–∫—Å—ã n-—á–∞—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–º–æ–¥–∂–∏
                next_emoji = remake_huge_list[last_index_emoji + 1][1]
                their_indexes = get_indexes_current_part_block(next_emoji,
                                                               get_dict_with_index_emoji(remake_huge_list),
                                                               remake_huge_list,
                                                               use_this_index_as_first=last_index_emoji + 1,
                                                               action=action)
                if relocating_part_block[0] == next_emoji:
                    their_indexes = list(set(their_indexes) ^ set(our_indexes))

                # –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
                remake_huge_list = height_change_elements(remake_huge_list,
                                                          to_up_indexes=their_indexes, to_down_indexes=our_indexes)
            else:
                # —É–¥–∞–ª—è–µ–º —ç–≤–µ–Ω—Ç—ã –±–ª–æ–∫–∞ –∏–∑ –∫–æ–Ω—Ü–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
                for one_index in our_indexes:
                    remake_huge_list.insert(0, remake_huge_list.pop(one_index))

            # –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã —á–∞—Å—Ç–∏ –±–ª–æ–∫–∞
            relocating_part_block[1] = remake_element = \
                sorted([remake_huge_list.index(one_elem) for one_elem in relocating_part_block[2]])

            # –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —á–∞—Å—Ç–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
            full_indexes_parts = get_indexes_current_part_block(relocating_part_block[0],
                                                                get_dict_with_index_emoji(remake_huge_list),
                                                                remake_huge_list,
                                                                get_full_indexes_parts=True,
                                                                action=action)

            relocating_part_block[-1] = full_indexes_parts.index(relocating_part_block[1]) + 1 \
                if relocating_part_block[1] in full_indexes_parts \
                else '‚åò'

        else:
            # –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –¥–∏–∫—Ç
            new_with_index_emoji = \
                get_dict_with_index_emoji(remake_huge_list)

            # –ø–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –±–ª–æ–∫–∞
            our_indexes = new_with_index_emoji.get(remake_element)

            # –ø–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç–∏ –±–ª–æ–∫–∞
            full_indexes_parts = get_indexes_current_part_block(remake_element, new_with_index_emoji,
                                                                remake_huge_list,
                                                                get_full_indexes_parts=True,
                                                                action=action)

            # –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —ç–≤–µ–Ω—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∂–∏ –Ω–∞ –º–µ—Å—Ç–æ –¥—Ä—É–≥–æ–≥–æ —ç–º–æ–¥–∂–∏
            begin_index_emoji, last_index_emoji = our_indexes[0], our_indexes[-1]
            if len(full_indexes_parts) > 1:
                delete_different_parts_block(begin_index_emoji, last_index_emoji,
                                             remake_huge_list, remake_element, action)

            elif last_index_emoji != len(remake_huge_list) - 1:
                next_emoji = remake_huge_list[last_index_emoji + 1][1]

                # –∏–¥–µ–∫—Å—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–º–æ–¥–∂–∏
                their_indexes = get_indexes_current_part_block(next_emoji,
                                                               new_with_index_emoji,
                                                               remake_huge_list,
                                                               use_this_index_as_first=last_index_emoji + 1,
                                                               action=action)
                # –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
                remake_huge_list = height_change_elements(remake_huge_list,
                                                          to_up_indexes=their_indexes, to_down_indexes=our_indexes)
            else:

                # —É–¥–∞–ª—è–µ–º —ç–≤–µ–Ω—Ç—ã –±–ª–æ–∫–∞ –∏–∑ –∫–æ–Ω—Ü–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
                for one_index in our_indexes:
                    remake_huge_list.insert(0, remake_huge_list.pop(one_index))

    # –¥–µ–π—Å—Ç–≤–∏–µ –≤–≤–µ—Ä—Ö!
    else:

        if type(remake_element) is int:
            if remake_element:
                # –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º - 1
                remake_huge_list[remake_element], remake_huge_list[remake_element - 1] = \
                    remake_huge_list[remake_element - 1], remake_huge_list[remake_element]
                remake_element -= 1

            else:
                # –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–ª–µ–≤–æ–π –∏–Ω–¥–µ–∫—Å
                remake_huge_list.append(remake_huge_list.pop(0))
                remake_element = len(remake_huge_list) - 1

        elif type(remake_element) is list:

            # –ø–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω–∞—à–µ–π —á–∞—Å—Ç–∏ –±–ª–æ–∫–∞
            our_indexes = relocating_part_block[1]

            # –º–µ–Ω—è–µ–º —á–∞—Å—Ç–∏ –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º
            begin_index_emoji = our_indexes[0]

            if begin_index_emoji:

                # –∏–¥–µ–∫—Å—ã n-—á–∞—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–º–æ–¥–∂–∏
                next_emoji = remake_huge_list[begin_index_emoji - 1][1]
                their_indexes = get_indexes_current_part_block(next_emoji,
                                                               get_dict_with_index_emoji(remake_huge_list),
                                                               remake_huge_list,
                                                               use_this_index_as_first=begin_index_emoji - 1,
                                                               action=action)
                if relocating_part_block[0] == next_emoji:
                    their_indexes = list(set(their_indexes) ^ set(our_indexes))

                # –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
                remake_huge_list = height_change_elements(remake_huge_list,
                                                          to_up_indexes=our_indexes, to_down_indexes=their_indexes)
            else:
                # —É–¥–∞–ª—è–µ–º —ç–≤–µ–Ω—Ç—ã –±–ª–æ–∫–∞ –∏–∑ –Ω–∞—á–∞–ª–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
                for _ in our_indexes:
                    remake_huge_list.append(remake_huge_list.pop(0))

            # –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã —á–∞—Å—Ç–∏ –±–ª–æ–∫–∞
            relocating_part_block[1] = remake_element = \
                sorted([remake_huge_list.index(one_elem) for one_elem in relocating_part_block[2]])

            # –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —á–∞—Å—Ç–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
            full_indexes_parts = get_indexes_current_part_block(relocating_part_block[0],
                                                                get_dict_with_index_emoji(remake_huge_list),
                                                                remake_huge_list,
                                                                get_full_indexes_parts=True,
                                                                action=action)

            relocating_part_block[-1] = full_indexes_parts.index(relocating_part_block[1]) + 1 \
                if relocating_part_block[1] in full_indexes_parts \
                else '‚åò'

        else:
            # –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –¥–∏–∫—Ç
            new_with_index_emoji = \
                get_dict_with_index_emoji(remake_huge_list)

            # –ø–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –±–ª–æ–∫–∞
            our_indexes = new_with_index_emoji.get(remake_element)

            # –ø–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç–∏ –±–ª–æ–∫–∞
            full_indexes_parts = get_indexes_current_part_block(remake_element, new_with_index_emoji,
                                                                remake_huge_list,
                                                                get_full_indexes_parts=True,
                                                                action=action)

            # –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —ç–≤–µ–Ω—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∂–∏ –Ω–∞ –º–µ—Å—Ç–æ –¥—Ä—É–≥–æ–≥–æ —ç–º–æ–¥–∂–∏
            begin_index_emoji, last_index_emoji = our_indexes[0], our_indexes[-1]
            if len(full_indexes_parts) > 1:
                delete_different_parts_block(begin_index_emoji, last_index_emoji,
                                             remake_huge_list, remake_element, action)

            elif begin_index_emoji:
                next_emoji = remake_huge_list[begin_index_emoji - 1][1]

                # –∏–¥–µ–∫—Å—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–º–æ–¥–∂–∏
                their_indexes = get_indexes_current_part_block(next_emoji,
                                                               new_with_index_emoji,
                                                               remake_huge_list,
                                                               use_this_index_as_first=begin_index_emoji - 1,
                                                               action=action)

                # –ø–µ—Ä–µ–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
                remake_huge_list = height_change_elements(remake_huge_list,
                                                          to_up_indexes=our_indexes, to_down_indexes=their_indexes)
            else:
                # —É–¥–∞–ª—è–µ–º —ç–≤–µ–Ω—Ç—ã –±–ª–æ–∫–∞ –∏–∑ –Ω–∞—á–∞–ª–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
                for _ in our_indexes:
                    remake_huge_list.append(remake_huge_list.pop(0))

    # –∏–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –±—É–¥—É—â–µ–≥–æ
    if history_remakes[-1][-1] == 'in_future':
        history_remakes = [one_elem
                           for one_elem in history_remakes
                           if one_elem[-1] != 'in_future']
    history_remakes.append([remake_element, remake_huge_list])

    return remake_element, remake_huge_list, relocating_part_block, history_remakes


def save_dp_remakes(user_id, updated_data_steps_and_save=None):
    remake_huge_list, cold_block, all_time_DP, \
    delta_utc, the_end_dp, DP_clock, \
    recast_time_DP, huge_list, = \
        get_data_process_dp(user_id,
                            'remake_huge_list', 'cold_block', 'all_time_DP',
                            'delta_utc', 'the_end_dp', 'DP_clock',
                            'recast_time_DP', 'huge_list')

    # –∏–Ω–¥–µ–∫—Å—ã cold_block –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω—ã
    if cold_block:
        cold_block = dict(
            [
                # dict —Ñ–æ—Ä–º–∞—Ç–∞: {emoji: [its_new_index_in_remake_huge_list]}
                (one_emoji,
                 [
                     # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç remake_huge_list,
                     new_index for new_index, new_elem in enumerate(remake_huge_list)
                     # –Ω–µ —ç–ª–µ–º–µ–Ω—Ç –ª–∏ —ç—Ç–æ —Å –∞–π–¥–∏ (new_elem[3]), –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —É –¥–∞–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∂–∏ –≤ cold_block
                     if new_elem[3] in [huge_list[old_index][3] for old_index in old_indexes_elements]
                 ])
                # –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏ —ç–º–æ–¥–∂–∏ –∏–∑ cold_block
                for one_emoji, old_indexes_elements in cold_block.items()
            ])

    # –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    cl_ev_for_block = {}
    full_remake_huge_list = \
        minus_all_freeze_block(remake_huge_list, cold_block, with_deep_copy=True)
    with_index_emoji = work_with_index_emoji = \
        get_dict_with_index_emoji(full_remake_huge_list)

    # –≤—Ä–µ–º—è –±–ª–æ–∫–∞ –∏ —Å–º–µ–Ω–∞ —ç–º–æ–¥–∂–∏
    updated_data_get_time_block, \
    clock_block, cold_block, \
    remake_huge_list, \
    progress_block, last_emoji, \
    our_part_of_block, \
    plus_time_work_block, all_time_DP, cold_event, \
    stb_block \
        = get_time_block(updated_data_get_time_block=None,
                         huge_list=remake_huge_list, clock_event=None,
                         clock_block=None, last_emoji=None,
                         our_part_of_block=[], cold_block=cold_block,
                         cl_ev_for_block=cl_ev_for_block, with_index_emoji=with_index_emoji,
                         end_last_time_event=None, all_time_DP=all_time_DP,
                         work_with_index_emoji=work_with_index_emoji, cold_event=[],
                         progress_block=None, plus_time_work_block=None,
                         index_this_elem=get_first_work_index(remake_huge_list, check_all_list=True), stb_block=0)

    # –æ–±–Ω–æ–≤–ª—è–µ–º –î–ü
    out_come_text_mes, full_kb_dp, updated_data_usual_dp = \
        values_for_usual_dp(remake_huge_list,
                            all_time_DP=all_time_DP, delta_utc=delta_utc,
                            cold_event=None, clock_event=None,
                            cold_block=cold_block, clock_block=clock_block,
                            user_id=user_id, the_end_dp=the_end_dp,
                            DP_clock=DP_clock, str_clock=recast_time_DP,
                            first_open=False)

    save_data_process_dp(user_id, huge_list=remake_huge_list,
                         remake_huge_list=remake_huge_list,
                         cl_ev_for_block=cl_ev_for_block,
                         with_index_emoji=with_index_emoji, work_with_index_emoji=work_with_index_emoji,
                         updated_data_get_time_block=updated_data_get_time_block, clock_block=clock_block,
                         cold_block=cold_block, progress_block=progress_block, last_emoji=last_emoji,
                         our_part_of_block=our_part_of_block, plus_time_work_block=plus_time_work_block,
                         all_time_DP=all_time_DP, cold_event=cold_event, updated_data_rome_kb=None,
                         updated_data_relocating_elem=None,
                         updated_data_values_first_dp=None,
                         updated_data_usual_dp=updated_data_usual_dp,
                         remake_element=None, history_remakes=[],
                         updated_data_steps_and_save=updated_data_steps_and_save,
                         stb_block=0)
