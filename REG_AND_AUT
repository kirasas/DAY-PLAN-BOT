import datetime
from aiogram import Bot, types
from aiogram.utils.exceptions import MessageNotModified
from aiogram.utils.exceptions import InvalidQueryID
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import CallbackQuery
from aiogram.types import ParseMode
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, \
    InlineKeyboardMarkup, CallbackQuery, ReplyKeyboardRemove
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.emoji import emojize
import emoji
import asyncio
import sqlite3
import random
import uuid
import time
import ast
import os
from IMP.CONSTS_imp import special_numbers_circle
from IMP.APIES_imp import API_1

# –±–æ—Ç
bot = Bot(token=API_1)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# —Å—Ç–µ–π—Ç—ã
class first_actions(StatesGroup):
    waiting_command = State()
    begin_reg = State()


class process_reg(StatesGroup):
    appeal = State()
    login = State()
    password = State()
    s_code = State()


# –±–¥
conn = sqlite3.connect(f'TWO_DB.db', check_same_thread=False)
cursor = conn.cursor()

# CONSTS_FOR_REG
visiting_system_kb = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton('‚úàÔ∏è–í–û–ô–¢–ò‚úàÔ∏è', callback_data='visiting_into'),
    InlineKeyboardButton('üöÄ–ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–ØüöÄ', callback_data='visiting_reg'))
deregistration_kb = \
    ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
        KeyboardButton("‚≠ï–û–¢–ú–ï–ù–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò‚≠ï"))
appeal_ques_kb = InlineKeyboardMarkup().row(
    InlineKeyboardButton("‚úîÔ∏è–î–ê‚úîÔ∏è", callback_data="appeal_yes"),
    InlineKeyboardButton("‚úñÔ∏è–ù–ï–¢‚úñÔ∏è", callback_data="appeal_no"))
main_menu_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
    KeyboardButton('‚úîÔ∏èDAY PLAN‚úñÔ∏è'),
    KeyboardButton('üë§PROFILE üë§'),
    KeyboardButton('‚öôÔ∏èSETTINGS‚öôÔ∏è'))
secret_code_save_kb = InlineKeyboardMarkup().add(
    InlineKeyboardButton("‚úîÔ∏è–°–ï–ö–†–ï–¢–ù–´–ô –ö–û–î –°–û–•–†–ê–ù–Å–ù‚úîÔ∏è", callback_data='yes_save_secret_code'))
is_all_right_reg_kb = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("‚úñÔ∏èÔ∏è–ù–ï–¢‚úñÔ∏èÔ∏è", callback_data='control_inform_no'),
    InlineKeyboardButton("‚úîÔ∏è–î–ê‚úîÔ∏è", callback_data='control_inform_yes'))


# def
async def cancel_reg_or_aut(state, chat_id, action_reg=True):
    async with state.proxy() as data:
        id_reg = data.get('id_reg')
        id_begin_reg = data.get('id_begin_reg')

    await bot.delete_message(chat_id=chat_id, message_id=id_reg)
    await bot.delete_message(chat_id=chat_id, message_id=id_reg - 1)
    await bot.edit_message_text(f'{"üöÄ–ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–ØüöÄ" if action_reg else "‚úàÔ∏è–í–û–ô–¢–ò‚úà"}\n\n'
                                f'‚ùå*–û–¢–ú–ï–ù–ï–ù–û*‚ùå',
                                chat_id=chat_id,
                                message_id=id_begin_reg,
                                parse_mode=ParseMode.MARKDOWN)
    await state.finish()
    await asyncio.sleep(0.1)

    await first_actions.begin_reg.set()
    await bot.edit_message_text('üîÖ*–í—Ö–æ–¥ –≤ DAY PLAN*üîÖ\n\n'
                                '`|-|-|-|`\n\n'
                                'üí†–í–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, '
                                '—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É—Å–ª—É–≥–∞–º DAY PLANüí†',
                                chat_id=chat_id,
                                message_id=id_begin_reg,
                                parse_mode=ParseMode.MARKDOWN,
                                reply_markup=visiting_system_kb)


# start_1: –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
@dp.message_handler(commands='start')
async def starting(message: types.Message):
    await first_actions.waiting_command.set()
    await bot.send_message(message.from_user.id,
                           f'‚úã*–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.username}!*‚úã\n \t\t'
                           f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, '
                           f'–ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é –±–æ—Ç–∞-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è DAY PLAN:\n \t\t/RegAut',
                           parse_mode=ParseMode.MARKDOWN)


# start_2: –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /RegAth
@dp.message_handler(commands='RegAut', state=first_actions.waiting_command)
async def visit_to_system(message: types.Message):
    await first_actions.next()

    await message.reply(text='üîÖ*–í—Ö–æ–¥ –≤ DAY PLAN*üîÖ\n\n'
                             '`|-|-|-|`\n\n'
                             'üí†–í–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, '
                             '—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É—Å–ª—É–≥–∞–º DAY PLANüí†',
                        parse_mode=ParseMode.MARKDOWN, reply_markup=visiting_system_kb)


# start_3: –±–æ—Ç –ø–∏—à–µ—Ç –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏—Å–ø–æ–ª–Ω–∏—Ç –∫–æ–º–∞–Ω–¥—É /RegAth
@dp.message_handler(state=first_actions.waiting_command)
async def repetition_endless(message: types.Message):
    await bot.send_message(message.from_user.id,
                           f'‚úã*–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.username}!*‚úã\n \t\t'
                           f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, '
                           f'–ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é –±–æ—Ç–∞-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è DAY PLAN:\n \t\t/RegAut',
                           parse_mode=ParseMode.MARKDOWN)


# reg_1: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ—Ç–µ–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
@dp.callback_query_handler(text='visiting_reg', state=first_actions.begin_reg)
async def appeal_1(callback: types.CallbackQuery, state: FSMContext):
    id_begin_reg = \
        await callback.message.edit_text('üöÄ–ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–ØüöÄ')
    await asyncio.sleep(0.2)

    fist_reg_point = await bot.send_message(callback.from_user.id, "üîí‚ûñ*–† –ï –ì –ò –° –¢ –† –ê –¶ –ò –Ø*‚ûñüîí",
                                            parse_mode=ParseMode.MARKDOWN, reply_markup=deregistration_kb)
    await asyncio.sleep(0.2)

    id_reg = \
        await bot.send_message(callback.from_user.id,
                               "üñ±*1/5üñ±*\n\n‚ùîÔ∏è|–ù—É–∂–Ω–æ –ª–∏ DAY PLAN –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ø–æ-–æ—Å–æ–±–æ–º—É|‚ùî",
                               reply_markup=appeal_ques_kb, parse_mode=ParseMode.MARKDOWN)
    await state.update_data(id_begin_reg=id_begin_reg.message_id,
                            id_reg=id_reg.message_id,
                            fist_reg_point=fist_reg_point.message_id,
                            number_error=0)


# reg_2: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∑–∞—Ö–æ—Ç–µ–ª –æ—Å–æ–±–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
@dp.callback_query_handler(text='appeal_no', state=first_actions.begin_reg)
async def appeal_no(callback: types.CallbackQuery, state: FSMContext):
    await process_reg.login.set()
    async with state.proxy() as data:
        id_reg = data.get('id_reg')

    await bot.edit_message_text('üñ±*1/5üñ±*\n\n‚ùîÔ∏è|–ù—É–∂–Ω–æ –ª–∏ DAY PLAN –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ø–æ-–æ—Å–æ–±–æ–º—É|‚ùî'
                                '\n\n‚ñ´Ô∏è*–û—Ç–≤–µ—Ç:* ___–Ω–µ—Ç, –Ω–µ –Ω—É–∂–Ω–æ!___',
                                chat_id=callback.from_user.id,
                                message_id=id_reg,
                                parse_mode=ParseMode.MARKDOWN)
    await asyncio.sleep(0.2)
    await callback.message.edit_text(f'üñ±*2/5üñ±*\n\n‚ùïÔ∏è|–°–Ω–∞—á–∞–ª–∞, '
                                     f'{callback.from_user.username}, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–µ–±–µ –ª–æ–≥–∏–Ω|‚ùï',
                                     parse_mode=ParseMode.MARKDOWN)


# reg_3: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ—Ç–µ–ª –æ—Å–æ–±–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
@dp.callback_query_handler(text='appeal_yes', state=first_actions.begin_reg)
async def appeal_yes_ques_choice(callback: types.CallbackQuery, state: FSMContext):
    await process_reg.appeal.set()

    # —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ –≤—Å–µ–º–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏
    cursor.execute(f'SELECT * FROM All_appeals')
    all_appeals = cursor.fetchall()
    all_buttons_appeals = \
        [
            InlineKeyboardButton(one_appeal[0], callback_data=f'{one_appeal[0]}_choice_appeal')
            for one_appeal in all_appeals
        ]

    # –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ö–ë
    while True:
        async with state.proxy() as data:
            if not data.get('appeal_user'):
                await bot.edit_message_text(
                    f'üñ±*1/5üñ±*\n\n‚ùîÔ∏è|–ù—É–∂–Ω–æ –ª–∏ DAY PLAN –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ø–æ-–æ—Å–æ–±–æ–º—É|‚ùî\n\n‚ñ´Ô∏è–ò –∫–∞–∫ —Ç—ã, '
                    f'{callback.from_user.username}, —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞–ª–∏—Å—å?‚ñ´Ô∏è',
                    chat_id=callback.from_user.id,
                    message_id=data['id_reg'],
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup().row(*all_buttons_appeals[:3]))
                all_buttons_appeals.append(all_buttons_appeals.pop(0))
                await asyncio.sleep(0.8)
            else:
                break


# reg_4: –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
@dp.callback_query_handler(Text(endswith="_choice_appeal"), state=process_reg.appeal)
async def appeal_yes_choice(callback: types.CallbackQuery, state: FSMContext):
    selected_appeal = callback.data[:-14]
    await state.update_data(appeal_user=selected_appeal)
    async with state.proxy() as data:
        id_reg = data.get('id_reg')

    # –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_element_kb = InlineKeyboardMarkup().row(
        InlineKeyboardButton('‚ûñ', callback_data=f'NONE'),
        InlineKeyboardButton(f'{selected_appeal}', callback_data=f'NONE'),
        InlineKeyboardButton('‚ûñ', callback_data=f'NONE'))
    await bot.answer_callback_query(callback.id, selected_appeal)
    await bot.edit_message_text(f'üñ±*1/5üñ±*\n\n'
                                f'‚ùîÔ∏è|–ù—É–∂–Ω–æ –ª–∏ DAY PLAN –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ø–æ-–æ—Å–æ–±–æ–º—É|‚ùî\n\n'
                                f'‚ñ´Ô∏è*–û—Ç–≤–µ—Ç:* '
                                f'___–¥–∞, –ø—É—Å—Ç—å –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ –º–Ω–µ –∫–∞–∫ –∫ {selected_appeal}!___',
                                chat_id=callback.from_user.id,
                                message_id=id_reg,
                                parse_mode=ParseMode.MARKDOWN,
                                reply_markup=selected_element_kb)
    await asyncio.sleep(0.2)

    await process_reg.login.set()
    await callback.message.edit_text(f'üñ±*2/5üñ±*\n\n‚ùïÔ∏è|–°–Ω–∞—á–∞–ª–∞, '
                                     f'{callback.from_user.username}, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–µ–±–µ –ª–æ–≥–∏–Ω|‚ùï',
                                     parse_mode=ParseMode.MARKDOWN)


# reg_5: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —Å–≤–æ—ë –æ–±—Ä–∞—â–µ–Ω–∏–µ
@dp.message_handler(state=process_reg.appeal)
async def appeal_yes_personal_user_appeal(message: types.Message, state: FSMContext):
    await state.update_data(appeal_user=message.text)
    async with state.proxy() as data:
        id_reg = data.get('id_reg')

    await bot.edit_message_text(f'üñ±*1/5üñ±*\n\n'
                                f'‚ùîÔ∏è|–ù—É–∂–Ω–æ –ª–∏ DAY PLAN –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ø–æ-–æ—Å–æ–±–æ–º—É|‚ùî\n\n'
                                f'‚ñ´Ô∏è*–û—Ç–≤–µ—Ç:* '
                                f'___–¥–∞, –ø—É—Å—Ç—å –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ –º–Ω–µ –∫–∞–∫ –∫ {message.text}!___',
                                chat_id=message.from_user.id,
                                message_id=id_reg,
                                parse_mode=ParseMode.MARKDOWN)
    await asyncio.sleep(0.2)

    await process_reg.login.set()
    await bot.edit_message_text(f'üñ±*2/5üñ±*\n\n‚ùïÔ∏è|–°–Ω–∞—á–∞–ª–∞, '
                                f'{message.from_user.username}, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–µ–±–µ –ª–æ–≥–∏–Ω|‚ùï',
                                chat_id=message.from_user.id,
                                message_id=id_reg,
                                parse_mode=ParseMode.MARKDOWN)


# reg_6: –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª–æ–≥–∏–Ω
@dp.message_handler(state=process_reg.login)
async def getting_login(message: types.Message, state: FSMContext):
    await message.delete()

    async with state.proxy() as data:
        id_reg = data.get('id_reg')

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º: –Ω–µ—Ç –ª–∏ —Ç–∞–∫–æ–≥–æ –ª–æ–≥–∏–Ω–∞ —É–∂–µ
    cursor.execute("SELECT Login FROM All_Users WHERE Login = ?", (message.text,))
    already_exist_login = cursor.fetchone()

    # —Ç–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ –µ—Å—Ç—å!
    if already_exist_login:
        async with state.proxy() as data:
            number_error = data.get('number_error') + 1
        await bot.edit_message_text(f'üñ±*2/5*üñ±\n\n'
                                    f'‚ùïÔ∏è|–°–Ω–∞—á–∞–ª–∞, {message.from_user.username}, '
                                    f'–ø—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–µ–±–µ –ª–æ–≥–∏–Ω|‚ùï'
                                    f'\n\n‚ñ´Ô∏è–õ–æ–≥–∏–Ω "___{message.text}___" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!‚ñ´Ô∏è\n'
                                    f'‚ùïÔ∏è|*–ü–æ–ø—ã—Ç–∫–∞*: '
                                    f'{special_numbers_circle[number_error]} –∏–∑ *ùü±*|‚ùï',
                                    chat_id=message.from_user.id,
                                    message_id=id_reg,
                                    parse_mode=ParseMode.MARKDOWN)
        await state.update_data(number_error=number_error)

        # –µ—Å–ª–∏ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ >= 5
        if number_error >= 5: await cancel_reg_or_aut(state, message.from_user.id)
    else:
        await bot.edit_message_text(f'üñ±*2/5üñ±*\n\n'
                                    f'‚ùïÔ∏è|–°–Ω–∞—á–∞–ª–∞, {message.from_user.username}, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–µ–±–µ –ª–æ–≥–∏–Ω|‚ùï\n\n'
                                    f'‚ñ´Ô∏è*–û—Ç–≤–µ—Ç:* ___–º–æ–π –ª–æ–≥–∏–Ω - {message.text}!___',
                                    chat_id=message.from_user.id,
                                    message_id=id_reg,
                                    parse_mode=ParseMode.MARKDOWN)
        await state.update_data(login_user=message.text)
        await asyncio.sleep(0.2)

        await process_reg.next()
        await bot.edit_message_text(f'üñ±*3/5üñ±*\n\n'
                                    f'‚ùïÔ∏è|–ê —Ç–µ–ø–µ—Ä—å, {message.from_user.username}, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–µ–±–µ –ø–∞—Ä–æ–ª—å|‚ùï',
                                    chat_id=message.from_user.id,
                                    message_id=id_reg,
                                    parse_mode=ParseMode.MARKDOWN)


# reg_7: –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø–∞—Ä–æ–ª—å
@dp.message_handler(state=process_reg.password)
async def reg_pass(message: types.Message, state: FSMContext):
    await message.delete()

    async with state.proxy() as data:
        id_reg = data.get('id_reg')
        login_user = data.get('login_user')

    # –µ—Å–ª–∏ —Å –ø–∞—Ä–æ–ª—ë–º –≤—Å—ë —Ö–æ—Ä–æ—à–æ
    if message.text != login_user and len(message.text) >= 8:
        await bot.edit_message_text(
            f'üñ±*3/5üñ±*\n\n'
            f'‚ùïÔ∏è|–ê —Ç–µ–ø–µ—Ä—å, {message.from_user.username}, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–µ–±–µ –ø–∞—Ä–æ–ª—å|‚ùï\n'
            f'‚ñ´Ô∏è*–û—Ç–≤–µ—Ç:* ___–º–æ–π –ø–∞—Ä–æ–ª—å - {message.text}!___',
            chat_id=message.from_user.id, message_id=id_reg,
            parse_mode=ParseMode.MARKDOWN)
        await state.update_data(password_user=message.text)
        await asyncio.sleep(0.2)

        await process_reg.next()
        secret_code = str(uuid.uuid4())
        await bot.edit_message_text(f'üñ±*4/5üñ±*\n\n'
                                    f'‚ùïÔ∏è|*SECRET CODE* –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –≤–∞–º, {message.from_user.username}, '
                                    f'–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –≤ —Å–ª—É—á–∞–µ –µ–≥–æ —É—Ç—Ä–∞—Ç—ã|‚ùï'
                                    f'\n\n‚ñ´Ô∏èÔ∏è–í–∞—à *SECRET CODE*:\n'
                                    f'`{secret_code}`'
                                    f'\n\nüìå–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É *SECRET CODE* –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç',
                                    chat_id=message.from_user.id,
                                    message_id=id_reg,
                                    parse_mode=ParseMode.MARKDOWN,
                                    reply_markup=secret_code_save_kb)
        await state.update_data(secret_code_user=secret_code)
    else:

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º—Å—è —Å —Ç–µ–∫—Å—Ç–æ–º –æ—à–∏–±–∫–∏
        if message.text == login_user and len(message.text) < 8:
            text_error = '–±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ —Å–µ–º–∏ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –ª–æ–≥–∏–Ω–∞'
        else:
            text_error = '–±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ —Å–µ–º–∏ —Å–∏–º–≤–æ–ª–æ–≤' if len(message.text) < 8 \
                else '–æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –ª–æ–≥–∏–Ω–∞'

        async with state.proxy() as data:
            number_error = data.get('number_error') + 1
        await bot.edit_message_text(f'üñ±*3/5*üñ±\n\n'
                                    f'‚ùïÔ∏è|–ê —Ç–µ–ø–µ—Ä—å, {message.from_user.username}, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–µ–±–µ –ø–∞—Ä–æ–ª—å|‚ùï\n\n'
                                    f'‚ñ´Ô∏è–ü—Ä–æ—Å—Ç–∏—Ç–µ, –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω {text_error}‚ñ´Ô∏è\n'
                                    f'‚ùïÔ∏è|*–ü–æ–ø—ã—Ç–∫–∞*: '
                                    f'{special_numbers_circle[number_error]} –∏–∑ *ùü±*|‚ùï',
                                    chat_id=message.from_user.id,
                                    message_id=id_reg,
                                    parse_mode=ParseMode.MARKDOWN)
        await state.update_data(number_error=number_error)

        # –µ—Å–ª–∏ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ >= 5
        if number_error >= 5: await cancel_reg_or_aut(state, message.from_user.id)


# reg_8: —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥
@dp.callback_query_handler(text='yes_save_secret_code', state=process_reg.s_code)
async def s_code_reg(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        id_reg = data.get('id_reg')

    await bot.edit_message_text('üñ±*4/5üñ±*\n\n'
                                f'‚ùïÔ∏è|*SECRET CODE* –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –≤–∞–º, {callback.from_user.username}, '
                                f'–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –≤ —Å–ª—É—á–∞–µ –µ–≥–æ —É—Ç—Ä–∞—Ç—ã|‚ùï\n\n'
                                '‚ñ´Ô∏è*–û—Ç–≤–µ—Ç:* ___SECRET CODE - –∑–∞–ø–∏—Å–∞–Ω!___Ô∏è',
                                chat_id=callback.from_user.id,
                                message_id=id_reg,
                                parse_mode=ParseMode.MARKDOWN)
    await asyncio.sleep(0.2)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with state.proxy() as data:
        is_appeal_existing = \
            f"<b>Ô∏èÔ∏è‚ñ´–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:</b> <code>{data['appeal_user']}</code>Ô∏è\n" if data.get('appeal_user') \
                else ""

        await bot.edit_message_text(f'üñ±<b>5/5üñ±</b>\n\n'
                                    f'‚ùîÔ∏è|–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã, {callback.from_user.id}, —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏|‚ùî\n\n'
                                    f'Ô∏è{is_appeal_existing}'
                                    f'‚ñ´<b>–í–∞—à –ª–æ–≥–∏–Ω:</b> <code>{data["login_user"]}</code>\n'
                                    f'‚ñ´<b>–í–∞—à –ø–∞—Ä–æ–ª—å:</b> <code>{data["password_user"]}</code>\n\n',
                                    chat_id=callback.from_user.id,
                                    message_id=id_reg,
                                    parse_mode=ParseMode.HTML,
                                    reply_markup=is_all_right_reg_kb)


# reg_8: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
@dp.callback_query_handler(text='control_inform_yes', state=process_reg.s_code)
async def all_reg_ok(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        id_begin_reg = data.get('id_begin_reg')
        id_reg = data.get('id_reg')
        fist_reg_point = data.get('fist_reg_point')

        bot_ID = "".join([str(random.randint(0, 9)) + str(one_num)
                          for one_num in range(5)])
        # –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—â—É—é –±–¥
        cursor.execute(
            'INSERT INTO All_Users '
            '(Appeal, Login, Password, Secret_Code, Bot_ID, Date_Reg) '
            'VALUES (?, ?, ?, ?, ?, ?)',
            (data.get("appeal_user"), data['login_user'], data['password_user'],
             data['secret_code_user'],
             bot_ID,
             str(datetime.datetime.now()),))
        conn.commit()

        # —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –±–¥
        os.mkdir(f"Users_BOT/{data['login_user']}_log")

        one_user_conn = sqlite3.connect(f'Users_BOT/'
                                        f'{data["login_user"]}_log/'
                                        f'{data["login_user"]}_dbS.db',
                                        check_same_thread=False)
        one_user_cursor = one_user_conn.cursor()

        one_user_cursor.execute(f'''CREATE TABLE 
                                    history_working 
                                    ([DATE] STRING,
                                     [WEEK DAY] STRING,
                                     [FULL/NOT FULL] INT,
                                     [ELEMENT DOING SPEED] STRING,
                                     [Time End of Day Plan] STRING);''')

        one_user_cursor.execute(f'''CREATE TABLE 
                                    classification_of_events 
                                    ([Code_element] STRING,
                                    [Name in DAY PLAN] STRING, 
                                    [Description in DAY PLAN] STRING, 
                                    [Description as element] STRING
                                    [Physics Cycle] STRING
                                    [Time of doing] STRING);''')

        one_user_cursor.execute(f'''CREATE TABLE 
                                    classification_of_blocks 
                                    ([Code element] STRING,
                                    [Name in DAY PLAN] STRING, 
                                    [Description in DAY PLAN] STRING, 
                                    [Description as element] STRING
                                    [Physics Cycle] STRING
                                    [Content] STRING);''')

        one_user_cursor.execute(f'''CREATE TABLE 
                                    hierarchy_day_plans 
                                    ([WEEK DAY] STRING,
                                    [LOCATIONS_ELEMENTS_IN_PLAN] STRING);''')
        one_user_conn.commit()

    # —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è-–≥—Ä–∞–Ω–∏—Ü—ã –Ω—É–∂–Ω—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å reply keyboards
    two_point_reg_mes = await bot.send_message(callback.from_user.id,
                                               "üîí‚ûñ*–† –ï –ì –ò –° –¢ –† –ê –¶ –ò –Ø*‚ûñüîí",
                                               parse_mode=ParseMode.MARKDOWN,
                                               reply_markup=ReplyKeyboardRemove())
    await bot.answer_callback_query(callback.id, "‚úîÔ∏è–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê‚úñÔ∏è")

    await bot.delete_message(chat_id=callback.from_user.id, message_id=fist_reg_point)
    await bot.delete_message(chat_id=callback.from_user.id, message_id=two_point_reg_mes.message_id)
    await bot.delete_message(chat_id=callback.from_user.id, message_id=id_begin_reg)

    await bot.edit_message_text('üîÖ*–í—Ö–æ–¥ –≤ DAY PLAN*üîÖ\n\n'
                                '`|-|-|-|`\n\n'
                                'üí†–í–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, '
                                '—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É—Å–ª—É–≥–∞–º DAY PLANüí†',
                                chat_id=callback.from_user.id,
                                message_id=id_reg,
                                parse_mode=ParseMode.MARKDOWN,
                                reply_markup=visiting_system_kb)
    await state.finish()
    await first_actions.begin_reg.set()


if __name__ == '__main__':
    executor.start_polling(dp)
