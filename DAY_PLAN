from aiogram import Bot, types
from aiogram.utils.exceptions import MessageNotModified
from aiogram.utils.exceptions import InvalidQueryID
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import CallbackQuery
from aiogram.types import ParseMode
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.emoji import emojize
import emoji
import asyncio
import sqlite3
from IMP.APIES_imp import API_1
from IMP.CONSTS_imp import dict_with_bold_nums, but_prov, back_mes, \
    dp_stop_tuple, active_kb, sett_kb, back_to_usual_sett_but, back_to_relocating_but, back_to_condition_but
from IMP.BASIS_imp import get_data_process_dp, save_data_process_dp, big_replacing, number_to_emoji, \
    get_live_hours, get_datetime_from_str, get_user_time_now, get_delta_time_to_str, get_first_elem, \
    get_button, row_buttons, add_buttons, to_big_kb, condition_existing_live_elem, create_dict_with_index_emoji
from IMP.DP_USUAL_imp import get_progress_dp, values_for_usual_dp, full_kb_for_usual_dp
from IMP.DP_REMAKING_imp import text_for_remaking_dp, text_pages_only_this_element, \
    full_kb_for_relocating_elements, up_down_elements, save_dp_remakes, full_kb_for_saving_dp
from IMP.BLOCK_USUAL_imp import get_time_all_parts_block, \
    get_time_block, values_for_usual_block, get_indexes_current_part_block
from IMP.EVENT_USUAL_imp import values_for_usual_seeing_event, values_for_usual_work_event
from DOP_INFO import abc_list

# –±–æ—Ç
bot = Bot(token=API_1)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# STATES
class work_dp(StatesGroup):
    the_work = State()


class remaking_dp(StatesGroup):
    get_remake_el = State()


# 0/–¥–ª—è –∑–∞–ø—É—Å–∫–∞: –∫–æ—Å—Ç—ã–ª—å
@dp.message_handler(text=["3"])
async def the_bone(message: types.Message, state: FSMContext):
    first_kb = row_buttons(get_button('3', callback_data='way_to_DP'))
    await message.answer('1', reply_markup=first_kb)

    # state –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏—à—å –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π
    await state.update_data(login='hello')
    await state.update_data(huge_list=abc_list)
    await work_dp.the_work.set()


# 0.5/testing
@dp.message_handler(text=["2"], state='*')
async def the_test(message: types.Message):
    one_di = None
    await message.answer('1', parse_mode=ParseMode.MARKDOWN, reply_markup=one_di)


# 1/–ó–∞–ø—É—Å–∫ –î–ü, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
@dp.callback_query_handler(text="way_to_DP", state=work_dp.the_work)
async def starting_work(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        login = data.get('login')

    # BD
    conn = sqlite3.connect('TWO_DB.db', check_same_thread=False)
    cursor = conn.cursor()

    # –±–µ—Ä—ë–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç UTC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, default = 3 (–ú–°–ö)
    cursor.execute("SELECT DELTA_UTC FROM All_Users WHERE Login = ?",
                   (login,))
    delta_utc = int(cursor.fetchone()[0])
    user_time_now = get_user_time_now(delta_utc)

    # —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è —Å —á–∞—Å–∞–º–∏ —Ä–∞–±–æ—Ç—ã DP
    cursor.execute("SELECT STOP_HOUR FROM All_Users WHERE Login = ?",
                   (login,))
    stop_h = cursor.fetchone()
    cursor.execute("SELECT BEGIN_HOUR FROM All_Users WHERE Login = ?",
                   (login,))
    beg_h = cursor.fetchone()

    live_time_list = list(get_live_hours(beg_h[0], stop_h[0])) if stop_h or beg_h \
        else None

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–π —á–∞—Å –∫ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º
    if live_time_list \
            and int(user_time_now.strftime("%H")) not in live_time_list:

        await bot.send_message(chat_id=callback.from_user.id,
                               text='üòµ*–í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –∞ –≤—ã –¥–∞–∂–µ –µ—â—ë –Ω–µ –Ω–∞—á–∞–Ω–∞–ª–∏!*üòµ',
                               parse_mode=ParseMode.MARKDOWN)
    else:
        async with state.proxy() as data:
            huge_list = data.get('huge_list')

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
        cursor.execute('SELECT Appeal FROM All_Users WHERE Login=?',
                       (login,))
        its_appeal = cursor.fetchone()[0]

        # —Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ, –≥–¥–µ –±—É–¥–µ—Ç –∫—ç—à
        cursor.execute(f'INSERT INTO all_cashDP (login, user_id, work_dict) '
                       f'VALUES (?, ?, ?)',
                       (login, callback.from_user.id, str(
                           {'huge_list': huge_list,
                            'user_appeal': its_appeal,
                            'all_time_DP': [],
                            'real_number_stars': 0,
                            'stb_DP': 0,
                            'stb_block': 0,
                            'stb_event': 0,
                            'delta_utc': delta_utc}),))
        conn.commit()

        # —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        act_format = f'{its_appeal}*, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,' if its_appeal \
            else '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,'

        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç
        for num_s in range(3, 0, -1):

            start_mes = f'‚≠ê*{act_format} –ø–æ–¥–æ–∂–¥–∏!\n\n' \
                        f'üèÜ *DAY PLAN* –¥–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ _{num_s}..._'

            if num_s == 3:
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                begin_message_dp = await bot.send_message(callback.from_user.id,
                                                          text=start_mes,
                                                          parse_mode=ParseMode.MARKDOWN)
                save_data_process_dp(callback.from_user.id, id_dp=begin_message_dp.message_id)

            else:
                await bot.edit_message_text(chat_id=callback.from_user.id,
                                            text=start_mes,
                                            message_id=get_data_process_dp(callback.from_user.id, 'id_dp'),
                                            parse_mode=ParseMode.MARKDOWN)
            await asyncio.sleep(0.8)

        # —Å–∞–º –î–ü
        asked, need_kb = values_for_usual_dp(callback.from_user.id,
                                             get_data_process_dp(callback.from_user.id, 'huge_list'), 'oneDP',
                                             f"‚úîÔ∏è*DAY PLAN*‚úñ\n"
                                             f"\t\t\t\t\tüïí*0000*üïò\n"
                                             f" ‚ù±‚óØ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚óØ‚ù∞\n\n")

        await bot.edit_message_text(chat_id=callback.from_user.id, text=asked,
                                    message_id=get_data_process_dp(callback.from_user.id, 'id_dp'),
                                    parse_mode=ParseMode.MARKDOWN,
                                    reply_markup=row_buttons(but_prov, your_kb=need_kb))

        # –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        while True:

            huge_list = get_data_process_dp(callback.from_user.id, 'huge_list')

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–π —á–∞—Å –∫ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º
            user_time_now = get_user_time_now(delta_utc)
            if live_time_list \
                    and int(user_time_now.strftime("%H")) not in live_time_list:

                all_time_DP, DP_clock, id_dp = \
                    get_data_process_dp(callback.from_user.id, 'all_time_DP', 'DP_clock', 'id_dp')

                for elm in huge_list:
                    if elm[1] != '‚≠ê':
                        elm[1] = '‚ùå'
                save_data_process_dp(callback.from_user.id, huge_list=huge_list, the_end_dp=1)

                await bot.edit_message_text(chat_id=callback.from_user.id,
                                            text='*üèÅ–í–ê–®–ï –í–†–ï–ú–Ø –í–´–®–õ–ûüèÅ*',
                                            reply_markup=row_buttons(
                                                get_button('‚≠ï–í–ï–†–ù–£–¢–¨–°–Ø –ö –ü–õ–ê–ù–£ –î–ù–Ø‚≠ï',
                                                           callback_data='1_xDP')),
                                            message_id=id_dp,
                                            parse_mode=ParseMode.MARKDOWN)

                # –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                dif_time = user_time_now - DP_clock
                all_time_DP[2][user_time_now] = dif_time.total_seconds()
                save_data_process_dp(callback.from_user.id, all_time_DP=all_time_DP)
                break

            await asyncio.sleep(300)


# 2/–î–ü –¥–æ –∑–∞–ø—É—Å–∫–∞: –ª–∏—Å—Ç–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
@dp.callback_query_handler(Text(endswith="_oneDP"), state=work_dp.the_work)
async def first_reading_pages(callback: types.CallbackQuery):
    huge_list, id_dp = \
        get_data_process_dp(callback.from_user.id, 'huge_list', 'id_dp')

    # –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ –∫–∞–ª–±–µ–∫–∞
    message_pages = int(callback.data[:-6])

    # —Å–æ–∑–¥–∞—ë—Ç DP: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ö–ë
    asked, need_kb = values_for_usual_dp(callback.from_user.id,
                                         huge_list, 'oneDP',
                                         f"Ô∏è‚úîÔ∏è*DAY PLAN*‚úñ\n"
                                         f"\t\t\t\t\tüïí*0000*üïò\n"
                                         f" ‚ù±‚óØ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚óØ‚ù∞\n\n",
                                         message_pages)

    try:
        await bot.edit_message_text(chat_id=callback.from_user.id, text=asked,
                                    message_id=id_dp, parse_mode=ParseMode.MARKDOWN,
                                    reply_markup=row_buttons(but_prov, your_kb=need_kb))
    except MessageNotModified:
        pass


# 3/–î–ü –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –î–ü
@dp.callback_query_handler(text='event_ready', state=work_dp.the_work)
@dp.callback_query_handler(text='active_DP', state=work_dp.the_work)
@dp.callback_query_handler(Text(endswith="_xDP"), state=work_dp.the_work)
async def body_dp(callback: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    save_data_process_dp(callback.from_user.id, proof=1, for_first_open_DP=True,
                         last_page=int(callback.data[0]) if callback.data[-4:] == '_xDP'
                         else 1)

    # –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
    if callback.data == 'event_ready':

        last_time_ready, delta_utc = \
            get_data_process_dp(callback.from_user.id, 'last_time_ready', 'delta_utc')

        # –¥–µ–ª–∞–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å
        user_time_now = get_user_time_now(delta_utc)
        if not last_time_ready or (user_time_now - get_datetime_from_str(last_time_ready)).seconds > 0.5:
            # get_data_process_dp
            clock_event, all_time_DP, real_number_stars, huge_list, \
            last_emoji, for_work_event, work_with_index_emoji = \
                get_data_process_dp(callback.from_user.id, 'clock_event', 'all_time_DP', 'real_number_stars',
                                    'huge_list', 'last_emoji', 'for_work_event', 'work_with_index_emoji')
            index_this_elem = for_work_event[0]

            # –æ–±–Ω–æ–≤–ª—è–µ–º huge_list
            huge_list[index_this_elem][1] = '‚≠ê'

            # –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
            start_to_end_ev = {clock_event: str(user_time_now)}
            all_time_DP[-1][last_emoji][-1].append(start_to_end_ev)

            # –æ–±–Ω–æ–≤–ª—è–µ–º –∂–∏–≤—ã–µ —ç–≤–µ–Ω—Ç—ã —É —ç–º–æ–¥–∂–∏
            work_with_index_emoji[last_emoji].remove(index_this_elem)

            # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∂–∏–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            condition_existing_live_elem(callback.from_user.id, huge_list, here_is_event=True)

            # –ø—Ä–∏–±–∞–≤–ª—è–µ–º –∑–≤—ë–∑–¥—ã
            real_number_stars += 1

            save_data_process_dp(callback.from_user.id,
                                 last_time_ready=str(user_time_now), end_last_time_event=str(user_time_now),
                                 clock_event=None,
                                 all_time_DP=all_time_DP, huge_list=huge_list,
                                 work_with_index_emoji=work_with_index_emoji,
                                 for_work_event=None, real_number_stars=real_number_stars, stb_event=0)

    # –≤–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ç–æ–ø–∞
    if callback.data == 'active_DP':

        # get_data_process_dp
        all_time_DP, clock_event, clock_block, \
        last_emoji, delta_utc, \
        stop_time_begin, stb_event, stb_block, stb_DP = \
            get_data_process_dp(callback.from_user.id, 'all_time_DP', 'clock_event',
                                'clock_block', 'last_emoji', 'delta_utc', 'stop_time_begin',
                                'stb_event', 'stb_block', 'stb_DP')

        # –ø—Ä–∏–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å—Ç–æ–ø–∞ –∫ –æ–±—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
        user_time_now = get_user_time_now(delta_utc)
        stop_delta = (user_time_now - get_datetime_from_str(stop_time_begin)).total_seconds()

        # —á—Ç–æ –¥–µ–ª–∞–µ–º —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º, –∫–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –î–ü
        stb_DP += stop_delta
        if clock_event:
            stb_event += stop_delta
            stb_block += stop_delta
            all_time_DP[-1][last_emoji][-1].append('‚õî',
                                                   {stop_time_begin: str(user_time_now)})
        elif clock_block:
            stb_block += stop_delta
            all_time_DP[-1][last_emoji].append(('‚õî',
                                                {stop_time_begin: str(user_time_now)}))
        else:
            all_time_DP.append({'‚õî': (stop_time_begin, str(user_time_now))})
        save_data_process_dp(callback.from_user.id,
                             stb_event=stb_event, stb_block=stb_block, stb_DP=stb_DP,
                             all_time_DP=all_time_DP)

    while True:
        proof_num = get_data_process_dp(callback.from_user.id, 'proof')

        if proof_num != 1:
            break
        else:

            # get_data_process_dp
            for_first_open, huge_list, id_dp, delta_utc, \
            DP_clock, recast_time, last_page, the_end_dp, stb_DP = \
                get_data_process_dp(callback.from_user.id, 'for_first_open_DP', 'huge_list', 'id_dp', 'delta_utc',
                                    'DP_clock', 'recast_time_DP', 'last_page', 'the_end_dp', 'stb_DP')

            # —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
            if not DP_clock:
                # –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                DP_clock = str(get_user_time_now(delta_utc))
                save_data_process_dp(callback.from_user.id, DP_clock=DP_clock)

            # —Å–º–æ—Ç—Ä–∏–º: –Ω—É–∂–Ω–æ –ª–∏ –≤—ã—Å—á–∏—Ç—ã–≤–∞—Ç—å –¥–µ–ª—å—Ç—É –≤—Ä–µ–º–µ–Ω–∏
            str_clock = recast_time if the_end_dp \
                else get_delta_time_to_str(DP_clock, delta_utc, adding_time=-stb_DP)

            if for_first_open or str_clock != recast_time:

                # —Å–æ–∑–¥–∞—ë—Ç DP: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ö–ë
                asked, need_kb = values_for_usual_dp(callback.from_user.id,
                                                     huge_list, 'xDP',
                                                     f"‚úîÔ∏è*DAY PLAN*‚úñÔ∏è\n"
                                                     f"\t\t\t\t\tüïí {str_clock} üïò\n"
                                                     f" ‚ù±‚óØ"
                                                     f"{get_progress_dp(callback.from_user.id, huge_list)}"
                                                     f"‚óØ‚ù∞\n\n",
                                                     last_page)

                # —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ö–ë –ø–æ —É—Å–ª–æ–≤–∏—è–º –µ–≥–æ —Ä–∞–±–æ—Ç—ã
                need_kb = full_kb_for_usual_dp(callback.from_user.id,
                                               huge_list, need_kb)

                # —É—Å–ª–æ–≤–∏–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                try:
                    if get_data_process_dp(callback.from_user.id, 'proof') == 1:
                        await bot.edit_message_text(
                            text=asked, chat_id=callback.from_user.id, message_id=id_dp,
                            parse_mode=ParseMode.MARKDOWN, reply_markup=need_kb)

                    if callback.data == 'event_ready':
                        numbers_stars = \
                            big_replacing(get_data_process_dp(callback.from_user.id, "real_number_stars"),
                                          dict_with_bold_nums)
                        await bot.answer_callback_query(callback.id,
                                                        f'‚≠ê{numbers_stars}‚≠ê')
                except MessageNotModified or InvalidQueryID:
                    pass

                save_data_process_dp(callback.from_user.id,
                                     recast_time_DP=str_clock, for_first_open_DP=False)

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–∏–∫–ª–∞, –≤ —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            proof_num, the_end_dp = get_data_process_dp(callback.from_user.id, 'proof', 'the_end_dp')

            if proof_num == 1 and not the_end_dp:
                await asyncio.sleep(60)
            else:
                break


# 4/–±–ª–æ–∫
@dp.callback_query_handler(text="way_bl", state=work_dp.the_work)
@dp.callback_query_handler(text="block_snow", state=work_dp.the_work)
@dp.callback_query_handler(Text(endswith="_SUNbl"), state=work_dp.the_work)
async def body_block(callback: types.CallbackQuery):
    save_data_process_dp(callback.from_user.id, proof=2, for_first_open_block=True)

    # –∑–∞–º–æ—Ä–æ–∑–∫–∞ –±–ª–æ–∫–∞
    if callback.data == 'block_snow':
        await bot.answer_callback_query(callback.id, "‚ùÑÔ∏è")

        # get_data_process_dp
        last_emoji, with_index_emoji, huge_list, cold_block = \
            get_data_process_dp(callback.from_user.id, 'last_emoji', 'with_index_emoji',
                                'huge_list', 'cold_block')

        # –Ω–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –±–ª–æ–∫–∞
        indexes_freeze_emoji = with_index_emoji.get(last_emoji)

        # –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —ç–≤–µ–Ω—Ç—ã
        for one_ind in indexes_freeze_emoji:
            huge_list[one_ind][1] = '‚ùÑÔ∏è'

        # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ª–∏—Å—Ç-–∑–∞–º–æ—Ä–æ–∑–∫–∏
        if cold_block:
            cold_block[last_emoji] = indexes_freeze_emoji
        else:
            cold_block = {last_emoji: indexes_freeze_emoji}
        save_data_process_dp(callback.from_user.id, huge_list=huge_list, cold_block=cold_block)

    # —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∞ –±–ª–æ–∫–æ–≤
    if '_SUNbl' in callback.data:
        await bot.answer_callback_query(callback.id, "‚òÄÔ∏è")

        # get_data_process_dp
        huge_list, cold_block = \
            get_data_process_dp(callback.from_user.id, 'huge_list', 'cold_block')

        # –ø–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∂–∏, —É–¥–∞–ª—è—è —ç–º–æ–¥–∂–∏ –∏–∑ cold_block
        sun_emoji = callback.data[0]
        for index_DP in cold_block.pop(sun_emoji):
            huge_list[index_DP][1] = sun_emoji

        save_data_process_dp(callback.from_user.id, huge_list=huge_list, cold_block=cold_block)

    while True:
        proof_num = get_data_process_dp(callback.from_user.id, 'proof')

        if proof_num != 2:
            break
        else:

            # get_data_process_dp
            for_first_open, huge_list, id_dp, clock_block, delta_utc, recast_time, stb_block = \
                get_data_process_dp(callback.from_user.id, 'for_first_open_block', 'huge_list', 'id_dp',
                                    'clock_block', 'delta_utc', 'recast_time_block', 'stb_block')

            # –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ–ª–æ –±–ª–æ–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è
            clock_block = get_time_block(callback.from_user.id, huge_list) if for_first_open \
                else clock_block

            # –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            str_clock = get_delta_time_to_str(clock_block, delta_utc,
                                              adding_time=get_time_all_parts_block(callback.from_user.id) - stb_block)

            if for_first_open or recast_time != str_clock:

                elements_block, need_kb = values_for_usual_block(callback.from_user.id,
                                                                 str_clock, clock_block)

                # —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
                if get_data_process_dp(callback.from_user.id, 'proof') == 2:
                    try:
                        await bot.edit_message_text(
                            text=elements_block, chat_id=callback.from_user.id, message_id=id_dp,
                            parse_mode=ParseMode.MARKDOWN, reply_markup=need_kb)

                    except MessageNotModified:
                        pass
                save_data_process_dp(callback.from_user.id, recast_time_block=str_clock)

            # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª, –µ—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            proof_num = get_data_process_dp(callback.from_user.id, 'proof')

            if proof_num == 2:
                await asyncio.sleep(60)
            else:
                break


# 5/–æ—Å–≤–µ—â–µ–Ω–∏–µ –±–ª–æ–∫–∞ - —É–±—Ä–∞—Ç—å –∑–∞–º–æ—Ä–æ–∑–∫—É
@dp.callback_query_handler(text="sunning", state=work_dp.the_work)
async def sun_to_block(callback: types.CallbackQuery):
    save_data_process_dp(callback.from_user.id, proof=4)

    # get_data_process_dp
    user_appeal, id_dp, cold_block, last_page = \
        get_data_process_dp(callback.from_user.id, 'user_appeal', 'id_dp',
                            'cold_block', 'last_page')

    # —Å–æ–∑–¥–∞—ë–º –ö–ë
    sun_kb = row_buttons(get_button(back_mes,
                                    callback_data=f'{last_page}_xDP'))

    # —Å–æ–∑–¥–∞—ë–º –ª–∏—Å—Ç —Å–æ –≤—Å–µ–º–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–º–∏ –±–ª–æ–∫–∞–º–∏-—ç–º–æ–¥–∂–∏
    butt_list = [get_button(f'{one_emoji}',
                            callback_data=f'{one_emoji}_SUNbl')
                 for one_emoji in tuple(cold_block)]

    # —Å–æ–∑–¥—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é to_big_kb –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    try:
        await bot.edit_message_text(f'‚≠ê*{user_appeal}*, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å?', chat_id=callback.from_user.id,
                                    message_id=id_dp,
                                    reply_markup=to_big_kb(butt_list, sun_kb), parse_mode=ParseMode.MARKDOWN)
    except MessageNotModified:
        pass


# 6/—Ä–∞–±–æ—Ç–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
@dp.callback_query_handler(text="seeing_one_element", state=work_dp.the_work)
@dp.callback_query_handler(text="eclipse_el", state=work_dp.the_work)
@dp.callback_query_handler(Text(endswith="_disappearMOON"), state=work_dp.the_work)
async def self_element_see(callback: types.CallbackQuery):
    save_data_process_dp(callback.from_user.id, proof=2.5)

    # get_data_process_dp
    huge_list, id_dp, last_emoji, work_with_index_emoji = \
        get_data_process_dp(callback.from_user.id, 'huge_list', 'id_dp',
                            'last_emoji', 'work_with_index_emoji')

    # –ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if callback.data == 'eclipse_el':
        await bot.answer_callback_query(callback.id, "üåë")

        cold_event = get_data_process_dp(callback.from_user.id, 'cold_event')
        if not cold_event:
            cold_event = []

        # –Ω–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –¥–µ–ª–∞–µ–º –µ–≥–æ —ç–º–æ–¥–∂–∏ –ª—É–Ω–æ–π
        now_index_el = get_first_elem(huge_list, work_with_index_emoji.get(last_emoji))[0]
        cold_event.append(now_index_el)
        huge_list[now_index_el][1] = 'üåë'

        save_data_process_dp(callback.from_user.id, huge_list=huge_list, cold_event=cold_event)

    # —Å–Ω—è—Ç–∏–µ –ª—É–Ω—ã —É —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if '_disappearMOON' in callback.data:
        last_emoji, cold_event = \
            get_data_process_dp(callback.from_user.id, 'last_emoji', 'cold_event')

        #  —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
        no_moon_event = int(callback.data[0])
        cold_event.remove(no_moon_event)
        huge_list[no_moon_event][1] = last_emoji
        save_data_process_dp(callback.from_user.id, huge_list=huge_list, cold_event=cold_event)

    message_a, event_kb = values_for_usual_seeing_event(callback.from_user.id, huge_list)

    try:
        await bot.edit_message_text(message_a, chat_id=callback.from_user.id,
                                    message_id=id_dp, parse_mode=ParseMode.MARKDOWN,
                                    reply_markup=event_kb)
    except MessageNotModified:
        pass


# 7/–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –ª—É–Ω—ã - —É–±—Ä–∞—Ç—å –ª—É–Ω—É —É —ç–ª–µ–º–µ–Ω—Ç–∞
@dp.callback_query_handler(text="mooning", state=work_dp.the_work)
async def not_moon_event(callback: types.CallbackQuery):
    save_data_process_dp(callback.from_user.id, proof=5)

    # get_data_process_dp
    user_appeal, id_dp, last_page, cold_event = \
        get_data_process_dp(callback.from_user.id, 'user_appeal', 'id_dp',
                            'last_page', 'cold_event')

    not_moon_kb = row_buttons(get_button(back_mes,
                                         callback_data=f'{last_page}_xDP'))
    # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ª–∏—Å—Ç –ø–æ –≤–æ–∑–≤—Ä–∞—Å—Ç–∞–Ω–∏—é
    cold_event.sort()

    # —Å –ø–æ–º–æ—â—å—é number_to_emoji –ø–µ—Ä–µ–≤–æ–¥–∏–º —á–∏—Å–ª–æ –≤ emoji
    butt_list = [get_button(f'{number_to_emoji(one_elem + 1)}',
                            callback_data=f'{one_elem}_disappearMOON')
                 for one_elem in cold_event]

    await bot.edit_message_text(f'‚≠ê*{user_appeal}*, –≥–¥–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∑–∞—Ç–º–µ–Ω–∏–µ?', chat_id=callback.from_user.id,
                                message_id=id_dp,
                                reply_markup=to_big_kb(butt_list, not_moon_kb), parse_mode=ParseMode.MARKDOWN)


# 8/–Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
@dp.callback_query_handler(text="in_doing_event", state=work_dp.the_work)
async def self_element_do(callback: types.CallbackQuery):
    save_data_process_dp(callback.from_user.id, proof=3, for_first_open_event=True)

    while True:
        proof_num = get_data_process_dp(callback.from_user.id, 'proof')

        if proof_num != 3:
            break
        else:

            # get_data_process_dp
            for_first_open, huge_list, id_dp, clock_event, delta_utc, recast_time, stb_event \
                = get_data_process_dp(callback.from_user.id, 'for_first_open_event', 'huge_list', 'id_dp',
                                      'clock_event', 'delta_utc', 'recast_time_event', 'stb_event')

            if for_first_open:

                # get_data_process_dp
                cl_ev_for_block, for_work_event, last_emoji = \
                    get_data_process_dp(callback.from_user.id, 'cl_ev_for_block', 'for_work_event', 'last_emoji')

                # —á–∞—Å—ã —ç–≤–µ–Ω—Ç–∞
                if not clock_event:
                    all_time_DP, clock_block = \
                        get_data_process_dp(callback.from_user.id, 'all_time_DP', 'clock_block')
                    index_el = for_work_event[0]

                    # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º —è—Ä–ª—ã–∫, –µ—Å–ª–∏ –Ω–µ—Ç –µ–≥–æ
                    if not clock_block or not all_time_DP[-1].get(last_emoji):
                        all_time_DP.append({last_emoji: []})

                    # –¥–æ–±–∞–≤–ª—è–µ–º —è—Ä–ª—ã–∫ –Ω–∞ —ç–≤–µ–Ω—Ç
                    all_time_DP[-1][last_emoji].append([index_el])
                    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                    clock_event = str(get_user_time_now(delta_utc))

                    # –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –±–ª–æ–∫–∞
                    if cl_ev_for_block:
                        cl_ev_for_block[index_el] = clock_event
                    else:
                        cl_ev_for_block = {index_el: clock_event}

                    save_data_process_dp(callback.from_user.id, all_time_DP=all_time_DP,
                                         clock_event=clock_event, cl_ev_for_block=cl_ev_for_block,
                                         for_first_open_event=False)
                else:
                    save_data_process_dp(callback.from_user.id, for_first_open_event=False)

            # –≤—Ä–µ–º—è –≤ 000
            str_clock, needing_clock_diff = get_delta_time_to_str(clock_event, delta_utc,
                                                                  adding_time=-stb_event, needing_clock_diff=True)

            if for_first_open or recast_time != str_clock:

                message_a, event_kb = values_for_usual_work_event(callback.from_user.id,
                                                                  huge_list, str_clock, needing_clock_diff)
                # —Å–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞
                try:
                    if get_data_process_dp(callback.from_user.id, 'proof') == 3:
                        await bot.edit_message_text(message_a, chat_id=callback.from_user.id,
                                                    message_id=id_dp, parse_mode=ParseMode.MARKDOWN,
                                                    reply_markup=event_kb)
                except MessageNotModified:
                    pass

                save_data_process_dp(callback.from_user.id, recast_time_event=str_clock)

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–∏–∫–ª–∞, –≤ —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            proof_num = get_data_process_dp(callback.from_user.id, 'proof')

            if proof_num == 3:
                await asyncio.sleep(60)
            else:
                break


# 9/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –î–ü
@dp.callback_query_handler(text="stop_dp", state=work_dp.the_work)
async def self_stop_dp(callback: types.CallbackQuery):
    save_data_process_dp(callback.from_user.id, proof=6)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å—Ç–æ–ø–∞
    delta_utc, huge_list = \
        get_data_process_dp(callback.from_user.id, 'delta_utc', 'huge_list')
    save_data_process_dp(callback.from_user.id,
                         stop_time_begin=str(get_user_time_now(delta_utc)))

    # –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –±–ª–æ–∫–∞
    get_time_block(callback.from_user.id, huge_list)

    # —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–æ–ø–∞ –∏–∑ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π
    for index_part, one_part_stop in enumerate(dp_stop_tuple):

        # –∫–æ–≥–¥–∞ –≤—Ç–æ—Ä–æ–π –∏–Ω–¥–µ–∫—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º active_kb
        if get_data_process_dp(callback.from_user.id, 'proof') == 6:
            await bot.edit_message_text(f'‚äô{"".join(dp_stop_tuple) if index_part else one_part_stop}',
                                        chat_id=callback.from_user.id,
                                        message_id=get_data_process_dp(callback.from_user.id, 'id_dp'),
                                        reply_markup=
                                        active_kb if index_part
                                        else None)


# 10/sett_DP
@dp.callback_query_handler(text="settings_DP",
                           state=(work_dp.the_work, remaking_dp.get_remake_el))
@dp.callback_query_handler(text=("save_changes", 'no_save_changes'),
                           state=remaking_dp.get_remake_el)
async def self_settings_dp(callback: types.CallbackQuery):
    save_data_process_dp(callback.from_user.id, proof=7)
    await work_dp.the_work.set()

    id_dp, last_page = \
        get_data_process_dp(callback.from_user.id, 'id_dp', 'last_page')

    # —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è —Å —Ä–∞–∑–Ω—ã–º–∏ callbacks
    if callback.data == 'save_changes':

        save_dp_remakes(callback.from_user.id)
        await callback.answer(f'DAY PLAN –æ–±–Ω–æ–≤–ª—ë–Ω!')

    elif callback.data == 'no_save_changes':
        save_data_process_dp(callback.from_user.id, remake_huge_list=None, remake_element=None,
                             history_remakes=None)

    await bot.edit_message_text(f'‚öôÔ∏è___–ù–ê–°–¢–†–û–ô–ö–ò___‚öôÔ∏è', chat_id=callback.from_user.id,
                                message_id=id_dp,
                                reply_markup=
                                row_buttons(get_button(back_mes, callback_data=f'{last_page}_xDP'),
                                            your_kb=sett_kb.copy()),
                                parse_mode=ParseMode.MARKDOWN)


# 11/sett_DP/element_order
@dp.callback_query_handler(text="coordinate_elements",
                           state=work_dp.the_work)
@dp.callback_query_handler(Text(endswith="_sett_dp_1"),
                           state=remaking_dp.get_remake_el)
async def sett_elem_order(callback: types.CallbackQuery):
    await remaking_dp.get_remake_el.set()

    id_dp, huge_list, remake_huge_list, remake_element, last_page_set_2 = \
        get_data_process_dp(callback.from_user.id, 'id_dp', 'huge_list', 'remake_huge_list',
                            'remake_element', 'last_page_set_2')

    # —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    message_pages = int(callback.data[0]) if 'sett_dp_1' in callback.data \
        else 1

    if not remake_huge_list:
        remake_huge_list = huge_list
        save_data_process_dp(callback.from_user.id, last_page_set_1=message_pages, remake_huge_list=remake_huge_list,
                             history_remakes=[('1_sett_dp_1', remake_huge_list)])
    else:
        save_data_process_dp(callback.from_user.id, last_page_set_1=message_pages)

    # —Å–æ–∑–¥–∞—ë—Ç DP: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ö–ë
    asked, need_kb = values_for_usual_dp(callback.from_user.id,
                                         remake_huge_list, '_sett_dp_1',
                                         message_pages=message_pages,
                                         dif_create_pages=text_for_remaking_dp)

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –ö–ë
    if remake_huge_list == huge_list:
        # None –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ - –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª—å
        need_kb = row_buttons(back_to_usual_sett_but, your_kb=need_kb) if remake_element is None \
            else row_buttons(back_to_usual_sett_but, back_to_relocating_but(last_page_set_2), your_kb=need_kb)
    else:
        row_buttons(back_to_condition_but('settings_DP' if huge_list == remake_huge_list else 'condition_closing'),
                    back_to_relocating_but(last_page_set_2), your_kb=need_kb)

    try:
        await bot.edit_message_text(f'‚öôÔ∏è<b>–ù/</b><i>–ü–û–†–Ø–î–û–ö –ü–õ–ê–ù–ê</i>‚öôÔ∏è\n\n'
                                    f'<b>üìå–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!</b>\n'
                                    f'{asked}', chat_id=callback.from_user.id,
                                    message_id=id_dp,
                                    reply_markup=need_kb,
                                    parse_mode=ParseMode.HTML)
    except MessageNotModified:
        pass


# 12/sett_DP/element_order/ask: are you right?
@dp.callback_query_handler(text="condition_closing", state=remaking_dp.get_remake_el)
async def sett_elem_ask(callback: types.CallbackQuery):
    id_dp = \
        get_data_process_dp(callback.from_user.id, 'id_dp')

    save_kb = add_buttons(get_button('–°–û–•–†–ê–ù–ò–¢–¨', callback_data='save_changes'),
                          get_button('–ù–ï –°–û–•–†–ê–ù–Ø–¢–¨', callback_data='no_save_changes'),
                          get_button('–û–ë–†–ê–¢–ù–û –ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø–ú', callback_data='1_sett_dp_1'),
                          row_width=2)

    await bot.edit_message_text(f'‚öôÔ∏è*–ù/*___–ü–û–†–Ø–î–û–ö –ü–õ–ê–ù–ê___‚öôÔ∏è\n\n'
                                f'*‚ùì–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è DAY PLAN‚ùì*', chat_id=callback.from_user.id,
                                message_id=id_dp,
                                reply_markup=save_kb,
                                parse_mode=ParseMode.MARKDOWN)


# 13/sett_DP/element_order/seeking_remake_el
@dp.message_handler(Text(endswith="BLX"),
                    state=remaking_dp.get_remake_el)
@dp.message_handler(Text(startswith="/EVN"),
                    state=remaking_dp.get_remake_el)
@dp.message_handler(Text(startswith="/PART"),
                    state=remaking_dp.get_remake_el)
async def seeking_els(message: types.Message):
    await message.delete()

    id_dp, remake_huge_list = \
        get_data_process_dp(message.from_user.id, 'id_dp', 'remake_huge_list')

    with_index_emoji = \
        create_dict_with_index_emoji(remake_huge_list)
    # —á–∞—Å—Ç—å –±–ª–æ–∫–∞
    if '/PART' in message.text:
        number_part_and_emoji = message.text.split('_', 1)
        emoji_block = emoji.emojize(f':{number_part_and_emoji[1]}:')
        all_parts_this_block = get_indexes_current_part_block(
            emoji_block, with_index_emoji,
            remake_huge_list, get_full_indexes_parts=True)
        this_something = None
        if all_parts_this_block:
            need_index_block = number_part_and_emoji[0][5:]
            if need_index_block.isdigit() and int(need_index_block) - 1 <= len(all_parts_this_block):
                indexes_our_part_block = this_something = all_parts_this_block[int(need_index_block) - 1]
                save_data_process_dp(message.from_user.id,
                                     relocating_part_block=
                                     [
                                         emoji_block, indexes_our_part_block,
                                         [remake_huge_list[one_ind] for one_ind in indexes_our_part_block],
                                         int(need_index_block)
                                     ])

    # –±–ª–æ–∫ –∏–ª–∏ —ç–≤–µ–Ω—Ç
    else:
        this_something = emoji.emojize(f':{message.text[1:-3]}:') \
            if 'BLX' in message.text \
            else message.text[4:]

    remake_element = message_pages = None
    # —á–∞—Å—Ç—å –±–ª–æ–∫–∞!
    if type(this_something) is list:
        remake_element = message_pages = this_something
    # –Ω–∞–º –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–º–æ–¥–∂–∏?
    elif emoji.is_emoji(this_something) and with_index_emoji.get(this_something):
        remake_element = message_pages = this_something
    # –µ—Å—Ç—å —Ç–∞–∫–æ–π —ç–≤–µ–Ω—Ç?
    elif this_something.isdigit() and int(this_something) <= len(remake_huge_list):
        remake_element = int(this_something) - 1
        message_pages = str(remake_element)

    # –µ—Å–ª–∏ –≤–Ω–µ—Å–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    # remake_element –º–æ–∂–µ—Ç –±—ã—Ç—å = 0
    if remake_element is not None:

        # –Ω–∞—à –Ω–æ–≤—ã–π DP –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        asked, need_kb = values_for_usual_dp(message.from_user.id,
                                             remake_huge_list, 'sett_dp_2',
                                             message_pages=message_pages,
                                             dif_create_kb=text_pages_only_this_element)
        save_data_process_dp(message.from_user.id,
                             remake_element=remake_element,
                             last_page_set_2=1)
        try:
            await bot.edit_message_text(f'‚öôÔ∏è*–ù/*___–ü–û–†–Ø–î–û–ö –ü–õ–ê–ù–ê___‚öôÔ∏è\n\n'
                                        f'üî∫Ô∏èÔ∏è*–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç*üîª\n\n'
                                        f'{asked}', chat_id=message.from_user.id,
                                        message_id=id_dp,
                                        reply_markup=
                                        full_kb_for_relocating_elements(
                                            message.from_user.id, need_kb, remake_element),
                                        parse_mode=ParseMode.MARKDOWN)
        except MessageNotModified:
            pass


# 14/sett_DP/element_order/seeking_remake_el/to_pages
@dp.callback_query_handler(text=("up_element", 'down_element'), state=remaking_dp.get_remake_el)
@dp.callback_query_handler(Text(endswith="sett_dp_2"), state=remaking_dp.get_remake_el)
async def to_remake_pages(callback: types.CallbackQuery):
    id_dp, remake_huge_list, remake_element = \
        get_data_process_dp(callback.from_user.id, 'id_dp', 'remake_huge_list', 'remake_element')

    if 'sett_dp_2' in callback.data:

        # –ø—Ä–∏ X|_sett_dp_2, X - —ç–ª–µ–º–µ–Ω—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è,
        # –ø—Ä–∏ X_sett_dp_2, X - —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        message_pages = callback.data.split('|')[0] if '|' in callback.data \
            else int(callback.data[:-10])

        save_data_process_dp(callback.from_user.id,
                             last_page_set_2=message_pages if type(message_pages) is int
                             else 1)
    else:
        # –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        remake_element, remake_huge_list = \
            up_down_elements(callback.from_user.id,
                                   remake_element, remake_huge_list, action=callback.data)
        message_pages = str(remake_element) if type(remake_element) is int \
            else remake_element

        save_data_process_dp(callback.from_user.id,
                             last_page_set_2=1,
                             last_action_remaking=callback.data)

    asked, need_kb = values_for_usual_dp(callback.from_user.id,
                                         remake_huge_list, 'sett_dp_2',
                                         message_pages=message_pages,
                                         dif_create_kb=text_pages_only_this_element)

    try:
        await bot.edit_message_text(f'‚öôÔ∏è*–ù/*___–ü–û–†–Ø–î–û–ö –ü–õ–ê–ù–ê___‚öôÔ∏è\n\n'
                                    f'üî∫Ô∏èÔ∏è*–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç*üîª\n\n'
                                    f'{asked}', chat_id=callback.from_user.id,
                                    message_id=id_dp,
                                    reply_markup=full_kb_for_relocating_elements(
                                        callback.from_user.id, need_kb, remake_element),
                                    parse_mode=ParseMode.MARKDOWN)
    except MessageNotModified:
        pass


# 15/sett_DP/element_order/seeking_remake_el/to_pages/to_remakes
@dp.callback_query_handler(text=("back_old_step", 'back_future_step'), state=remaking_dp.get_remake_el)
@dp.callback_query_handler(text="save_remakes", state=remaking_dp.get_remake_el)
@dp.callback_query_handler(Text(endswith="_sett_dp_3"), state=remaking_dp.get_remake_el)
async def to_remakes(callback: types.CallbackQuery):
    id_dp, remake_huge_list, \
    history_remakes, message_pages = \
        get_data_process_dp(callback.from_user.id, 'id_dp', 'remake_huge_list',
                            'history_remakes', 'last_page_set_3')

    if callback.data == 'back_old_step':

        # –Ω–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –∏–Ω–¥–µ–∫—Å –Ω–µ –≤ –±—É–¥—É—â–µ–º - –Ω–∞—Å—Ç–æ—è—â–µ–µ
        for one_index, one_elem_history in enumerate(reversed(history_remakes)):

            if one_elem_history[-1] != 'in_future' and one_index != len(history_remakes) - 1:
                # –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ –≤ –æ–±—ã—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                history_remakes[-one_index - 1].append('in_future')
                new_present_time = history_remakes[-one_index - 2]
                remake_huge_list = new_present_time[1]

                save_data_process_dp(callback.from_user.id,
                                     remake_element=new_present_time[0] if new_present_time[0] != '1_sett_dp_1'
                                     else None,
                                     remake_huge_list=remake_huge_list, history_remakes=history_remakes)
                break

        else:
            await callback.answer('–ü—Ä–æ—à–ª–æ–µ –∏—Å—á–µ—Ä–ø–∞–Ω–æ!')

    elif callback.data == 'back_future_step':

        # –Ω–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –∏–Ω–¥–µ–∫—Å in_future
        for one_index, one_elem_history in enumerate(history_remakes):

            if one_elem_history[-1] == 'in_future':
                history_remakes[one_index].remove('in_future')
                remake_huge_list = one_elem_history[1]
                save_data_process_dp(callback.from_user.id, remake_element=one_elem_history[0],
                                     remake_huge_list=remake_huge_list,
                                     history_remakes=history_remakes)
                break
        else:
            await callback.answer('–ë—É–¥—É—â–µ–µ –Ω–µ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ!')

    elif callback.data == 'save_remakes':
        save_dp_remakes(callback.from_user.id)
        await callback.answer(f'DAY PLAN –æ–±–Ω–æ–≤–ª—ë–Ω!')

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º—Å—è c –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if '_sett_dp_3' in callback.data:
        message_pages = int(callback.data[0])
        save_data_process_dp(callback.from_user.id, last_page_set_3=message_pages)

    asked, need_kb = values_for_usual_dp(callback.from_user.id,
                                         remake_huge_list, 'sett_dp_3',
                                         message_pages=message_pages)

    try:
        await bot.edit_message_text(f'‚öôÔ∏è*–ù/*___–ü–û–†–Ø–î–û–ö –ü–õ–ê–ù–ê___‚öôÔ∏è\n\n'
                                    f'‚úÖ*SIMPLE DAY PLAN*‚ùå\n\n'
                                    f'{asked}', chat_id=callback.from_user.id,
                                    message_id=id_dp,
                                    reply_markup=full_kb_for_saving_dp(callback.from_user.id, need_kb,
                                                                       message_pages, callback.data),
                                    parse_mode=ParseMode.MARKDOWN)
    except MessageNotModified:
        pass


# -!/–≤—Å—ë
@dp.callback_query_handler(text="close_DP", state='*')
async def all_work_done(callback: types.CallbackQuery):
    await bot.edit_message_text(f'ALL!', chat_id=callback.from_user.id,
                                message_id=get_data_process_dp(callback.from_user.id,
                                                               'id_dp'), parse_mode=ParseMode.MARKDOWN)


if __name__ == '__main__':
    executor.start_polling(dp)
