from IMP.CONSTS_imp import special_numbers_circle
from IMP.BASIS_imp import get_first_elem, condition_existing_live_elem, \
    condition_did_all_elem, get_data_process_dp, save_data_process_dp, \
    get_button, row_buttons, get_datetime_from_str


def get_indexes_current_part_block(last_emoji, with_index_emoji, huge_list,
                                   use_this_index_as_first=None, get_full_indexes_parts=None):
    # –µ—Å–ª–∏ last_emoji is NOT None, –∏—â–µ–º –∏–Ω–¥–µ–∫—Å—ã –ø–æ —ç–º–æ–¥–∂–∏,
    # –∏–Ω–∞—á–µ - –Ω–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –ø–µ—Ä–≤–æ–≥–æ —ç–º–æ–¥–∂–∏
    indexes_emoji = with_index_emoji.get(last_emoji) if last_emoji \
        else tuple(with_index_emoji.values())[0]

    if indexes_emoji:

        index_el = use_this_index_as_first if use_this_index_as_first \
            else get_first_elem(huge_list, indexes_emoji)[0]

        if len(indexes_emoji) == 1:
            return indexes_emoji

        else:

            # –Ω–∞—Ö–æ–¥–∏–º –∫–∞–∂–¥—ã–µ –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –±–ª–æ–∫–∞
            every_part_of_block = [[]]
            for this_index, one_ind in enumerate(indexes_emoji):

                every_part_of_block[-1].append(one_ind)

                # –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–≤—É–º—è –∏–¥—É—â–∏–º–∏ –ø–æ–¥—Ä—è–¥ –∏–¥–µ–∫—Å–∞–º–∏ > 1, —Ç–æ —ç—Ç–æ –¥—Ä—É–≥–∞—è —á–∞—Å—Ç—å –±–ª–æ–∫–∞
                if one_ind != indexes_emoji[-1] and indexes_emoji[this_index + 1] - one_ind > 1:

                    # –µ—Å–ª–∏ –Ω–∞—à –∏–Ω–¥–µ–∫—Å –≤ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –±–ª–æ–∫–∞
                    if not get_full_indexes_parts:
                        if index_el in every_part_of_block[-1]: return every_part_of_block[-1]

                    every_part_of_block.append([])

            # –µ—Å–ª–∏ return –µ—â—ë –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —Ç–æ –Ω–∞—à –∏–Ω–¥–µ–∫—Å –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –±–ª–æ–∫–∞ –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not get_full_indexes_parts:
                if index_el in every_part_of_block[-1]: return every_part_of_block[-1]
            else:
                return every_part_of_block


def run_time_block(user_id):
    our_part_of_block, cl_ev_for_block = \
        get_data_process_dp(user_id, 'our_part_of_block', 'cl_ev_for_block')

    if cl_ev_for_block and our_part_of_block:
        if indexes_emoji := our_part_of_block:
            # —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ —É –¥–∏–∫—Ç–∞ - –∏–Ω–¥–µ–∫—Å—ã N-–µ–º–æ–¥–∂–∏, –≥–¥–µ –∫–ª—é—á - last_emoji
            for index in indexes_emoji:
                # —Å–º–æ—Ç—Ä–∏–º –∫–∞–∂–¥—ã–π –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ c –¥–∞–Ω–Ω—ã–º —ç–º–æ–¥–∂–∏ –≤ cl_ev_for_block
                if timing := cl_ev_for_block.get(index):
                    # –Ω–∞—Ö–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ cl_ev_for_block, –≥–¥–µ –∫–ª—é—á –∏–Ω–¥–µ–∫—Å –∏–∑ indexes
                    return timing


def get_time_all_parts_block(user_id):
    all_time_DP, plus_time_work_block, last_emoji = \
        get_data_process_dp(user_id, 'all_time_DP', 'plus_time_work_block', 'last_emoji')

    # —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ == 0
    if plus_time_work_block is None:
        # –≤—Å—ë –≤—Ä–µ–º—è –∏–∑ —á–∞—Å—Ç–µ–π –±–ª–æ–∫–æ–≤ –ø–ª—é—Å—É–µ–º
        plus_time_work_block = 0
        for one_value_emoji in all_time_DP:
            if done_events := one_value_emoji.get(last_emoji):
                start_block = get_datetime_from_str(done_events[-1][0])
                end_block = get_datetime_from_str(done_events[-1][1])
                plus_time_work_block += (end_block - start_block).total_seconds()
        save_data_process_dp(user_id, plus_time_work_block=plus_time_work_block)

    return plus_time_work_block


def end_time_block(user_id, list_for_group_emoji):
    last_emoji, clock_block, with_index_emoji, huge_list = \
        get_data_process_dp(user_id, 'last_emoji', 'clock_block', 'with_index_emoji', 'huge_list')

    if list_for_group_emoji:
        for emoji_x, _ in list_for_group_emoji[0].items():

            if emoji_x != last_emoji:
                # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–µ–Ω–Ω–æ —Ç–∞–∫, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ - –±—ã—Å—Ç—Ä–µ–µ
                if clock_block:
                    last_end, all_time_DP = \
                        get_data_process_dp(user_id, 'end_last_time_event', 'all_time_DP')
                    if last_end:
                        this_block_time = (clock_block, last_end)
                        all_time_DP[-1][last_emoji].append(this_block_time)
                        clock_block = None
                        save_data_process_dp(user_id, progress_block=len(with_index_emoji.get(emoji_x)),
                                             last_emoji=emoji_x,
                                             our_part_of_block=get_indexes_current_part_block(emoji_x,
                                                                                              with_index_emoji,
                                                                                              huge_list),
                                             plus_time_work_block=None, all_time_DP=all_time_DP,
                                             clock_block=clock_block, cold_event=[])
                else:
                    save_data_process_dp(user_id, progress_block=len(with_index_emoji.get(emoji_x)), last_emoji=emoji_x,
                                         our_part_of_block=get_indexes_current_part_block(emoji_x,
                                                                                          with_index_emoji, huge_list),
                                         plus_time_work_block=None)
    return clock_block


def get_time_block(user_id,
                   huge_list):
    updated_data_4 = \
        get_data_process_dp(user_id, 'updated_data_4')

    if not updated_data_4 \
            or updated_data_4[0] != huge_list:

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∂–∏–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç + –≤—Ä–µ–º—è –±–ª–æ–∫–∞
        existing_events = condition_existing_live_elem(user_id, huge_list)

        clock_block = \
            get_data_process_dp(user_id, 'clock_block')

        if not clock_block:

            # –µ—Å–ª–∏ time –¥–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ —É–∂–µ –µ—Å—Ç—å, –∏–Ω–∞—á–µ - None
            if clock_block := run_time_block(user_id):
                save_data_process_dp(user_id, clock_block=clock_block)

        # –∫–æ–Ω–µ—Ü –≤—Ä–µ–º–µ–Ω–∏ –±–ª–æ–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏
        clock_block = end_time_block(user_id, existing_events)
        huge_list, last_emoji, with_index_emoji, work_with_index_emoji = \
            get_data_process_dp(user_id, 'huge_list', 'last_emoji', 'with_index_emoji', 'work_with_index_emoji')

        # yet_done - —Ä–∞–∑–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —ç–≤–µ–Ω—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∂–∏ (–≤ —Ç–æ–º —á–∏—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö) –∏ –∂–∏–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —ç–º–æ–¥–∂–∏
        yet_done = len(with_index_emoji.get(last_emoji)) - len(work_with_index_emoji.get(last_emoji))

        save_data_process_dp(user_id, list_for_group_emoji=existing_events, yet_done=yet_done,
                             for_first_open_block=False, updated_data_4=(huge_list, clock_block))
        return clock_block

    return updated_data_4[1]


def values_for_usual_block(user_id,
                           str_clock, clock_block):
    list_for_group_emoji, last_page, clock_event, updated_data_5 = \
        get_data_process_dp(user_id, 'list_for_group_emoji', 'last_page', 'clock_event', 'updated_data_5')

    # —É—Å–ª–æ–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
    if not updated_data_5 \
            or updated_data_5[0] != list_for_group_emoji:

        yet_done, progress_block = \
            get_data_process_dp(user_id, 'yet_done', 'progress_block')

        # –°–¢–†–û–ö–ò –ë–õ–û–ö–ê
        elements_block = ''
        for emoji_x, values_this_emoji_list in list_for_group_emoji[0].items():

            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç—Å—Ç—É–ø—ã
            elements_block = f"*THE BLOCK*\n\tüïí{str_clock}üïò\n" \
                             f"‚ùÆ‚ûñ*{yet_done}/{progress_block}*‚ûñ‚ùØ\n\n"

            # –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–±—ã—á–Ω—ã–º–∏ —ç–≤–µ–Ω—Ç–∞–º–∏
            for one_ind, one_value in enumerate(values_this_emoji_list):
                for elm_name, _ in one_value.items():
                    elements_block += \
                        f'\t{"".join([special_numbers_circle[int(elm)] for elm in str(one_ind + 1)])} | ' \
                        f'{elm_name}\n{emoji_x}\n'

    elif updated_data_5[1] != str_clock:

        recast_time = \
            get_data_process_dp(user_id, 'recast_time_block')

        elements_block = updated_data_5[4].replace(recast_time, str_clock, 1)

    else:
        elements_block = updated_data_5[4]

    # —É—Å–ª–æ–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ö–ë
    if not updated_data_5 \
            or updated_data_5[0] != list_for_group_emoji \
            or updated_data_5[2] != last_page \
            or updated_data_5[3] != clock_event:

        cold_event, huge_list = \
            get_data_process_dp(user_id, 'cold_event', 'huge_list')

        # –ö–ë –ë–õ–û–ö–ê
        # —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è —Å callbacks –∫–Ω–æ–ø–æ–∫
        last_page = last_page if last_page \
            else 1
        callback_for_event = 'in_doing_event' if clock_event \
            else 'seeing_one_element'

        # —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–º–æ—Ä–æ–∑–∫–∏
        need_kb = None
        if not clock_block and not cold_event \
                and condition_did_all_elem(huge_list, return_numbers=True) != len(huge_list) - 1:
            need_kb = row_buttons(get_button('‚ùÑÔ∏è', callback_data='block_snow'))
        need_kb = row_buttons(
            get_button('‚óÅ', callback_data=f'{last_page}_xDP'),
            get_button('‚ñ∑', callback_data=f'{callback_for_event}'), your_kb=need_kb)
    else:
        need_kb = updated_data_5[5]

    save_data_process_dp(user_id, updated_data_5=[list_for_group_emoji, str_clock,
                                                  last_page, clock_event,
                                                  elements_block, need_kb])

    return elements_block, need_kb
